<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="https://www.w3.org/2005/Atom" xml:base="https://mitranim.com">
  <title>Software, Tech, Philosophy, Games | Atom | mitranim</title>
  <id>https://mitranim.com/posts</id>
  <updated>2022-03-08T07:06:36Z</updated>
  <subtitle>Random thoughts about technology</subtitle>
  <author>
    <name>Nelo Mitranim</name>
    <email>me@mitranim.com</email>
  </author>
  <link rel="alternate" type="text/html" href="https://mitranim.com/posts"></link>
  <link rel="self" type="application/atom+xml" href="https://mitranim.com/feed.xml"></link>
  <entry xml:base="https://mitranim.com/posts/anime-impressions-parasyte">
    <title>Anime impressions: Parasyte</title>
    <id>https://mitranim.com/posts/anime-impressions-parasyte</id>
    <content type="html"><![CDATA[<article role="main article" class="fan-typo"><p>Link: <a href="https://en.wikipedia.org/wiki/Parasyte" target="_blank" rel="noopener noreferrer">https://en.wikipedia.org/wiki/Parasyte<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a>.</p>

<p>Very competent writing. The writers did their homework on biology and ethics, and it shows. Very well thought out. Deeply thought-provoking. Carefully averts common anime tropes. Not your typical &ldquo;shonen&rdquo; anime.</p>

<p>Parasyte does have a few deus ex machina moments and out-of-character scenes. To me they feel forced, like if a meddling executive wanted to make a certain point and had it shoved in without consulting the original author. Two examples come to mind. One is the final scene in Hikari Park, where I feel like both present females and to a lesser extent Shinichi act horrendously out of character, with nonsensical out-of-context lines. Other is the beginning of the last episode, which, while containing some cool ideas, seems forcibly inserted to create a &ldquo;happy ending&rdquo; for the more squeamish viewers who can&rsquo;t fully accept what happened up to that point. Otherwise, most of the writing seems extremely solid and well thought.</p>

<p>The series pays careful attention to biological details. It seems that after coming up with the general concepts, the authors gave a lot of thought to the implications of parasite biology, and made them into plot points.</p>

<p>I initially found it implausible that parasites tend to master language and learn immense amounts about the human society, technology, and customs in just a few hours, often having little to no contact with the stuff. But given the parasites&rsquo; aptitude for mimicry and being one large &ldquo;sentient muscle&rdquo;, this isn&rsquo;t <em>that</em> implausible. In order to take over a living body without killing it, then maintain and control it, the parasite assimilating the brain must learn and replicate its structure on the fly. This might give them the human&rsquo;s subconscious skills such as language and social customs. They don&rsquo;t seem to receive higher-level stuff like formal knowledge and memories.</p>

<p>The series explicitly points out that non-head parasites have to learn language from scratch. It slightly stretches belief in the beginning, when Migi utters its first words next morning, having never heard those words before. But for the most part its learning speed is handwaved by reading tons of books and encyclopedia articles really fast. This seems to become a habit: throughout the entire series whenever Shinichi and Migi rest at home, Migi is shown reading. This explains many of the differences between Migi and other parasites, and shows how much attention to subtle details went into the writing.</p>

<p>Non-head parasites perform the same on-the-fly mimicry while assimilating non-brain structures such as an arm or jaw/neck/chest. They can mimic skin, hair, and hard structures such as bones, teeth, and blades. More importantly, their tissue can perform the actual <em>function</em> of brains, muscles, and eyes. I wonder if they can morph into &ldquo;refinery&rdquo; organs such as digestive tract, liver, kidneys, etc., or if their tissue is not capable of adapting that far. After all, they have no such systems of their own.</p>

<p>One recurring point is that parasite intelligence is proportional to how much of its body is interconnected. Parasites can split their body into parts, which can be capable of thought and speech on their own, but very small parts have so little brainpower, they can&rsquo;t even rejoin the rest on their own. The series uses this for some interesting plot points.</p>

<p>The authors carefully make the point that the parasites start inherently identical, and diverge due to the differences in their maturation environments and other circumstances. The divergence produces a wide gradient from instintive, barely intelligent murderers like A, to highly intelligent scientifically-minded murderers like Reiko, to highly intelligent semi-pacifists with a degree of empathy like Migi and Jaw.</p>

<p>When it comes to fighting, the series carefully avoids &ldquo;power level&rdquo; tropes. It&rsquo;s stated and shown several times that parasites are evenly matched in open combat. This divides them from humans which almost always vary in strength, skill, preparedness, exhaustion levels, resolve, and more, which is aptly shown for contrast. Anime shows often rely on power levels: A is stronger than B, so A wins by default. Or conversely, A beating B establishes a linear power ladder with transitive relations. With parasites this is averted. To prevail, a parasite must do something different, like ganging up, taking advantage of the environment, using its host more efficiently, attacking before the target knows friend from foe, or unusual tactics other parasites don&rsquo;t know how to counter.</p>

<p>The parasites&rsquo; fighting style reinforces their image of extremely logical creatures focused on self-preservation. Despite going all-out with flashing blades, they tend to block every attack, always prioritizing defense over offense, fitting their nature as a truly solitary lifeform that can&rsquo;t afford dying. This stays true even when the parasite is attacking out of instintive fear and aggression, which might unbalance a human and make them reckless. Humans tend to leave openings during a fight, both in real life and in the series, fitting our nature as a collective lifeform which can afford to lose individuals.</p>

<p>I&rsquo;m impressed by how the series contrasts the ethical views of humans and parasites. The views tend to mirror their biology. The human empathy and modern humanistic morals are a product of our inter-dependence. At some point a character remarks that humanity is a single collective lifeform that consists of millions of individuals. In contrast, the parasites are solitary lifeforms with no reproductive ability. Note that such an organism is evolutionarily implausible, indicating a possible artificial origin. Regardless, for them it makes perfect biological sense to only care about self-preservation. Their psychology and ethics tend to reflect this perfectly. Migi reiterates many times that it lacks empathy.</p>

<p>I have a general impression that most people who grew up in a modern highly developed country, have lived comfortable lives, and received a good education, tend to have humanistic morals like &ldquo;all sentient life is precious&rdquo; which we mostly owe to the Renaissance. During the late 20th century, these morals have developed to include ideals like &ldquo;everyone is created equal&rdquo; and &ldquo;everyone should have equal opportunities&rdquo;. Can&rsquo;t really speak for others, but for a really long time I have ascribed these morals to common sense and intelligence. I have no doubt that plenty of highly intelligent humans don&rsquo;t share them, but humans are faulty and our intelligence is narrow. It always seemed obvious to me that if we create an artificial super-intelligence whose only base motivation is survival, if truly super-intelligent compared to humans, it would see value in friendship and cooperation and would consider it the greediest, most profitable long-term strategy as opposed to isolation or genocide. The 20th century seems to demonstrate this well: when trading replaces war, each economy seems to benefit. I have always assumed that humanistic morals stem from the laws of the universe rather from human idiosyncrazies, and would be universal among sufficiently-intelligent lifeforms. This might be a common fallacy known as <em>projection</em>: ascribing your own traits to others; in this case assuming it&rsquo;s <em>your</em> views that are universal. Regardless of reasoning, I expect many other viewers to have the same feeling about humanism.</p>

<p>For contrast, Parasyte gives us highly intelligent creatures, some well educated in human ethics and evolutionary biology, who have clearly given the topic a lot of thought and <em>don&rsquo;t</em> share these humanistic morals. They know that others are sentient just like them, and have no qualms about killing, neither humans nor their own kind. This reminds a modern comfort-coddled viewer that intelligence doesn&rsquo;t come hand-in-hand with empathy and humanism. The series further emphasizes this by contrasting: regular humans with humanist views, parasites who murder without a second thought, hooligan humans who bully others, a human who takes a parasite&rsquo;s worldview, a human who&rsquo;s a cruel serial killer, and eventually parasites with humanist tendencies. This reminds us that while biology greatly influences ethics, there will always be deviants. We can&rsquo;t simply say &ldquo;human = good&rdquo;, &ldquo;monster = bad&rdquo;. Who&rsquo;s the real monster?</p>

<p>From Migi and Jaw we know that parasites survive just fine without cannibalism. Shinichi and Migi explicitly tell this to Reiko. From Reiko we know the reason for cannibalism: head parasites receive a powerful directive &ldquo;devour this species&rdquo;, where &ldquo;this species&rdquo; is what they just took over, whether human or dog. Reiko submits to the cannibal hunger but eventually develops respect for sentient life and humanist tendencies. This receives an interesting development in the ending. Many parasites get slaughtered by human forces, and the remainder survive because they learn to avoid murder. This makes a subtle point that even for a species that starts as solitary cannibals, the kind <em>least</em> predisposed to peaceful coexistence, survival eventually demands coexistence and cooperation. Coexistence &ldquo;wins&rdquo; because groups are stronger than individuals. The collective lifeform of humanity dominates over the solitary and scarce parasitic lifeforms, imposing its policy of peace, and the remaining parasites must coexist and contribute, or be exterminated just like dangerous human deviants. As stated several paragraphs above, to my naive eyes this seems like a law of the universe that&rsquo;s unlikely to be overturned even by superior physiology.</p>

<p>Head parasites have to spend some of their brainpower on body maintenance, controlling the vital organs. Consider that bigger animals have bigger brains. Compared to humans, elephants and whales have much bigger and heavier brains despite much less intelligence. This indicates that body maintenance takes a significant amount of brainpower. Now consider that Migi doesn&rsquo;t have this handicap, and gets to spend it full brainpower on thinking and learning. Because of this, it starts off more intelligent than most parasites. It also gets smarter faster because it never stops learning. Whenever they&rsquo;re at home, Migi is always reading books or science articles.</p>

<p>More interestingly, Migi&rsquo;s views of inter-species relations differ from other parasites because it doesn&rsquo;t have their cannibal hunger. They easily murder defenseless humans, and lack empathy towards intelligent creatures. As a result, they see humans as mere prey and inferior species. In contrast, Migi gets constantly lectured by Shinichi about the value of human life, spends more time studying and thinking, and undergoes minor physiological changes. The series gives us good reasons for why its views eventually diverge.</p>

<p>Migi doesn&rsquo;t seem to share the prey-predator instincts of other parasites. Others react to Migi instinctively, displaying a combination of fear and killing intent, while Migi has no such reaction and uses violence only in self-defense.</p>

<p>Many tragedies happen around Shinichi because of Migi&rsquo;s mere presence. The first school massacre by A, the second school massacre by Shimada, Kana&rsquo;s death, the forest murders in the rural area where Shinichi spends a week after the fight with Gotou, and probably more. He always wants to rectify the situation, to clean up after himself, and does what he can, but it&rsquo;s always not enough or too late. Despite his best efforts, his and Migi&rsquo;s mere presence costs other people their lives or traumatic experiences. Sometimes it&rsquo;s directly his fault. In episode 15 in an underground parking place he causes a girl&rsquo;s death by telling her to get away from a &ldquo;parasite&rdquo;&hellip; which hadn&rsquo;t revealed itself yet, and which kills her first for being a witness. Migi also catalyzes the tragedies. While Migi doesn&rsquo;t kill any pure humans throughout the series, it actively tries and comes <em>very</em> close a few times. Several times it suggests confronting hostile parasites in a human crowd, using them as a &ldquo;meat shield&rdquo;. This forms a nice contrast with Migi&rsquo;s civilized speech and care for Shinichi, emphasizing its lack of empathy and care for human lives.</p>

<p>We don&rsquo;t get to see Satomi&rsquo;s perspective much. All we know is that she notices Shinichi&rsquo;s changes and has trouble accepting them. In retrospect, it seems likely that she realized more than she lets on. The same applies to Tachikawa (girl with glasses who uncovers Shimada), who has proven to be very observant, but Satomi gets many more chances. Shinichi performs superhuman athletic feats in her presence. He often talks to the right hand in public, sometimes in class, sometimes alone with Satomi <em>while closely observed by her</em>. He also accidentally gives her all kinds of clues. The first time we see Satomi, Migi gropes her breast and Shinichi claims it acted on its own. His right hand is unscratched after a beat-up by hooligans, even though his face and left hand are all bruised. On a date, Shinichi says something Migi-like, ascribes this to a &ldquo;friend&rdquo;, looks at his right hand, and mumbles that said &ldquo;friend&rdquo; is not exactly a &ldquo;person&rdquo;; Satomi asks if said &ldquo;friend&rdquo; is the reason he&rsquo;s changed. He talks to his hand on several occasions in her presence, and tends to immediately run away, usually to deal with a nearby parasite. Satomi would have to be monumentally dense to miss those clues. We also know that she occasionally stalks and observes Shinichi. The time when he threw a dead puppy in trash, then changed his mind and buried it; we later learn that she saw that. She also trails him in Hikari Park. It stands to reason that she stalked him a few more times, maybe saw him talk to Migi, maybe saw Migi&rsquo;s transformations. She definitely should have seen Migi at the end of the last episode, where Migi breaks its secrecy policy to catch her, and she acts as if nothing happened and keeps quiet about it. She probably starts suspecting Migi&rsquo;s existence quite early, getting more and more confirmations throughout the series. This feels like a nice &ldquo;rewatch bonus&rdquo; for a thoughtful viewer.</p>

<p>Reiko wonders about the meaning or reason behind the parasites&rsquo; existence, just like humans have wondered about our own for millenia, until evolutionary biology came along with a simple tautological explanation. Unlike humans, parasites seem evolutionarily implausible, therefore must have a creator, either human or non-human intelligence. Reiko is right to wonder. This is left intentionally unexplored and gives the viewers something interesting to ponder.</p>

<p>As an appetizer, the series features a strawman view by major Takeshi: parasites exist to cull the humans&rsquo; exponentially growing numbers and should be valued as predators that keep us in check, saving the global ecosystem. As such, they could have been created by humans themselves. The narration alludes to this with the line &ldquo;Someone had a thought: life on Earth must be protected&rdquo;. This could very well be a strawman, but doesn&rsquo;t contradict the events of the series. Parasites have many properties you would expect from such a weapon. Parasite larvas target almost exclusively humans. Parasites can&rsquo;t reproduce, which prevents them from spreading like a plague and exterminating their prey; the creators can gradually increase their count until they&rsquo;re killing humans at just the &ldquo;right&rdquo; rate. Their physiology and biochemistry is amazingly compatible with ours. Their intelligence, learning rate, mimicry, perfect adaptations for replacing the host and blending into the society, put them into a good position to kill more; compared to skulking in the shadows and hoping for good luck, it&rsquo;s much easier to walk around the streets and <em>make</em> your good luck. Whether or not this actually works to reduce the human population doesn&rsquo;t matter; someone could be crazy enough to try. Seems ironic that by the end of the series the remaining parasites have to become, for all intents and purposes, &ldquo;human&rdquo; to survive.</p>

<p>Conclusion: watch Parasyte. Do it slowly, taking the time to think.</p>
</article>]]></content>
    <published>2022-03-08T07:02:11Z</published>
    <updated>2022-03-08T07:02:11Z</updated>
    <link rel="alternate" href="https://mitranim.com/posts/anime-impressions-parasyte"></link>
    <summary type="html"><![CDATA[Thoughts and analysis on this surprisingly deep anime. Spoilers!]]></summary>
    <author>
      <name>Nelo Mitranim</name>
      <email>me@mitranim.com</email>
    </author>
  </entry>
  <entry xml:base="https://mitranim.com/posts/anime-impressions-evangelion">
    <title>Anime impressions: Evangelion</title>
    <id>https://mitranim.com/posts/anime-impressions-evangelion</id>
    <content type="html"><![CDATA[<article role="main article" class="fan-typo"><blockquote class="blockquote"><p>By psycho, of psychos, for psychos</p>
</blockquote>
<p>Evangelion requires special preparation for full enjoyment.</p>

<p>The most important thing to know is that Evangelion is not about meka action and not about optimistically beating the odds. It&rsquo;s about emotional turmoil, about an unshielded psyche suffering on contact with the world, conveyed through a unique narrative device of artificially stripping most characters of their social mask, their emotional shield. The story merely provides context, and the meka action theme is just a wrapper to attract viewers. Psychic turmoil and captiring the failings of the human psyche that we usually fail to notice, or hide from ourselves and each other, is what the author is <em>really</em> about.</p>

<p>Almost all important characters are socially maladjusted and display traits of various psychoses. Some appear emotionally healthy, then easily break under pressure. This can feel unrealistic and galling to a viewer with a healthy social circle. I recommend to interpret this as a narrative device. Characters are artificially &ldquo;unmasked&rdquo;, stripped of their social interface, the critic, the &ldquo;super-ego&rdquo; that dictates social behavior. Instead of showing a character&rsquo;s psyche and inner turmoil separately from their actions, Evangelion tends to show it <em>through</em> their actions, often unrealistic for a normal, socially adjusted human.</p>

<p>Character development inverts your expectations. Typical expectation is that characters progressively get more skillful, competent, powerful, and emotionally stable. In Evangelion, characters get progressively more psychotic and emotionally decrepit. When they get to know each other, instead of forming bonds of friendship and love, they become more wary and afraid of each other. The show explicitly points out how humans need each other for emotional comfort, but also run the risk of hurting each other due to carelessness and differences, and has no shortage of examples.</p>

<p>Many bizarre and psychotic actions can only be understood by relating them to your own emotional experiences. Figuring them out can be a lot of fun. One can view Evangelion as a psychedelic puzzle book. It captures various failings of the human psyche and asks you to recognize them in your own feelings and experiences. It offers you a chance to empathize with failings we often keep hidden under the social interface, which are broadly on display here.</p>

<p>The main protagonist is the most useless, cowardly wimp. Evangelion inverts the usual expectation of the hero growing stronger to beat the ever-greater odds, as the character only gets more pathetic as the plot goes on. The show even toys with our expectations by pretending that the character gets over his troubles, only to snap him again, several times. Evangelion seems to make a special point of building the most guilt-ridden, unwilling, passive &ldquo;hero&rdquo; imaginable and dragging him, often literally, into responsibility over the lives of others, complete with the consequences. I haven&rsquo;t been able to understand this &ldquo;point&rdquo; yet, neither logically nor emotionally.</p>

<p>The original series fails to conclude the plot. The last two episodes leave it mysterious, open to speculation and interpretation, and focus exclusively on inner psyche. This can be enjoyable if the viewer is prepared in advance. Otherwise, it can be frustrating. The actual conclusion is &ldquo;End of Evangelion&rdquo;, a &ldquo;movie&rdquo; released many years after, that continues directly from the third-last episode and concludes the &ldquo;real world&rdquo; action, with a healthy dose of psychic puzzles.</p>

<p>Many important details are only briefly alluded to, and need to be deciphered. The series rewards watching carefully, paying attention to details, thinking back, and thinking ahead. There&rsquo;s plenty of fun to be had by thinking about the implications of many plot details, events, technologies, and more, that are left unexplored on-screen. The show on the screen is like a compressed archive that can be decompressed in your head into a greater sum total of information, getting the most out of it.</p>
</article>]]></content>
    <published>2022-03-08T06:31:41Z</published>
    <updated>2022-03-08T06:31:41Z</updated>
    <link rel="alternate" href="https://mitranim.com/posts/anime-impressions-evangelion"></link>
    <summary type="html"><![CDATA[How to watch: Neon Genesis Evangelion, End of Evangelion.]]></summary>
    <author>
      <name>Nelo Mitranim</name>
      <email>me@mitranim.com</email>
    </author>
  </entry>
  <entry xml:base="https://mitranim.com/posts/anime">
    <title>Anime impressions and recommendations</title>
    <id>https://mitranim.com/posts/anime</id>
    <content type="html"><![CDATA[<article role="main article" class="fan-typo"><h2 id="recommended-without-reservations"><span class="heading-prefix" aria-hidden="true"></span>Recommended without reservations<a href="#recommended-without-reservations" class="heading-anchor" aria-hidden="true"></a></h2><ul>
<li><a href="https://en.wikipedia.org/wiki/Attack_on_Titan" target="_blank" rel="noopener noreferrer"><strong>Attack on Titan</strong><svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a>. Extremely competent writing; avoids many anime tropes; written like a detective story, rewards watching slowly and thinking ahead; full of competent characters who think ahead.</li>
<li><a href="https://en.wikipedia.org/wiki/Death_Note" target="_blank" rel="noopener noreferrer"><strong>Death Note</strong><svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a>. Extremely competent writing; not subject to anime tropes; detective story that rewards watching slowly and thinking ahead; has very competent characters who think ahead.</li>
<li><a href="https://en.wikipedia.org/wiki/Code_Geass" target="_blank" rel="noopener noreferrer"><strong>Code Geass</strong><svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a>. Saturated with coolness; competent writing; has competent characters who think ahead; avoids some common anime tropes but falls prey to others; prone to deus ex machina and angst ex machina; watch with English dubs, they&rsquo;re better than the original.</li>
<li><a href="https://en.wikipedia.org/wiki/Parasyte" target="_blank" rel="noopener noreferrer"><strong>Parasyte</strong><svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a>. Very competent writing; explores deep moral topics, gives you something to think about; has competent characters who think ahead; avoids most anime tropes; rewards watching slowly and thinking about the implications. Read <a href="/posts/anime-impressions-parasyte">my analysis</a>.</li>
<li><a href="https://en.wikipedia.org/wiki/Naruto" target="_blank" rel="noopener noreferrer"><strong>Naruto</strong><svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a>. Saturated with cool characters and action scenes; the plot keeps getting deeper and more convoluted; great music, tone, atmosphere; saturated with optimistic morals about never giving up; about half of the anime is fillers, skip most of them for better enjoyment.</li>
<li><a href="https://en.wikipedia.org/wiki/Fullmetal_Alchemist:_Brotherhood" target="_blank" rel="noopener noreferrer"><strong>Full Metal Alchemist Brotherhood</strong><svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a>. Somewhat unique theme; has various flaws, but manages to avert many common anime tropes; some mediocre parts, some really good parts.</li>
<li><a href="https://en.wikipedia.org/wiki/Hellsing" target="_blank" rel="noopener noreferrer"><strong>Hellsing OVA</strong><svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a> (2001-2002). Stylish vampire action; solid atmosphere and music; avoids many anime tropes.</li>
</ul>
<h2 id="recommended-with-reservations"><span class="heading-prefix" aria-hidden="true"></span>Recommended with reservations<a href="#recommended-with-reservations" class="heading-anchor" aria-hidden="true"></a></h2>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Mushishi" target="_blank" rel="noopener noreferrer"><strong>Mushishi</strong><svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a>. Requires tolerance to body horror.</li>
<li><a href="https://en.wikipedia.org/wiki/Neon_Genesis_Evangelion" target="_blank" rel="noopener noreferrer"><strong>Neon Genesis Evangelion</strong><svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a>. Requires special preparation and coaching, such as <a href="/posts/anime-impressions-evangelion">mine</a>, to get the most out of it.</li>
<li><a href="https://en.wikipedia.org/wiki/The_%22Hentai%22_Prince_and_the_Stony_Cat" target="_blank" rel="noopener noreferrer"><strong>Perverted Prince and Stony Cat / Hentai Ouji to Warawanai Neko</strong><svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a>. Requires tolerance to embarrassment. Don&rsquo;t get confused by the name; this is a lighthearted romantic comedy about children.</li>
</ul>
<h2 id="lukewarm"><span class="heading-prefix" aria-hidden="true"></span>Lukewarm<a href="#lukewarm" class="heading-anchor" aria-hidden="true"></a></h2>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Vampire_Hunter_D:_Bloodlust" target="_blank" rel="noopener noreferrer"><strong>Vampire Hunter D Bloodlust</strong><svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a>. High-quality production, but mostly senseless violence.</li>
<li><a href="https://en.wikipedia.org/wiki/One_Piece" target="_blank" rel="noopener noreferrer"><strong>One Piece</strong><svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a>. Like Naruto but dumber, uglier, with worse music, and still unfinished.</li>
<li><a href="https://en.wikipedia.org/wiki/FLCL" target="_blank" rel="noopener noreferrer"><strong>FLCL</strong><svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a>. Nonsensical mash of metaphors and angst.</li>
<li><strong>FLCL Progressive</strong>. Like the original but with more angst.</li>
</ul>
<h2 id="neutral"><span class="heading-prefix" aria-hidden="true"></span>Neutral<a href="#neutral" class="heading-anchor" aria-hidden="true"></a></h2>
<ul>
<li><strong>A Certain Magical Index</strong>. The anime is unfinished, needs season 4. The anime is compressed and doesn&rsquo;t make sense at times, especially in season 3. Obnoxious &ldquo;small world&rdquo; syndrome.</li>
<li><strong>Tokyo Ghoul</strong>: anime followed by manga. The anime sets the tone, but is horribly butchered and incomplete. You need to read the manga to actually finish the story.</li>
<li><strong>Great Teacher Onizuka</strong>.</li>
<li><strong>Full Metal Panic</strong>. Not to be confused with &ldquo;Fullmetal Alchemist&rdquo; which is unrelated. Combines embarrassing romantic comedy with military action. Full of dumb anime tropes. The anime is unfinished, lacking at least one season.</li>
<li><strong>Shinmai Maou no Testament</strong>. Has better music than the story deserves.</li>
</ul>
<h2 id="not-recommended"><span class="heading-prefix" aria-hidden="true"></span>Not recommended<a href="#not-recommended" class="heading-anchor" aria-hidden="true"></a></h2>
<ul>
<li><strong>Cowboy Bebop</strong>. Pretentious and nonsensical.</li>
<li><strong>Ergo Proxy</strong>. Pretentious and nonsensical.</li>
<li><strong>Trigun</strong>. Lots of violence without style.</li>
<li><strong>Ninja Scroll</strong>. Senseless darkness and violence.</li>
<li><strong>Bleach</strong>: the anime is incomplete and ends on the crappiest arc, missing the coolest final arc. If ever finalized, this might rate as &ldquo;neutral&rdquo;.</li>
<li><strong>Black Butler</strong>. The anime horribly butchers the source material.</li>
<li><strong>Ranma</strong>. Garbage source material, adaptation even worse.</li>
<li><strong>Mahou Sensei Negima</strong>. Could only handle a few episodes.</li>
</ul>
</article>]]></content>
    <published>2022-03-08T05:48:55Z</published>
    <updated>2022-03-08T05:48:55Z</updated>
    <link rel="alternate" href="https://mitranim.com/posts/anime"></link>
    <summary type="html"><![CDATA[Periodically-updated gist. Check later for more.]]></summary>
    <author>
      <name>Nelo Mitranim</name>
      <email>me@mitranim.com</email>
    </author>
  </entry>
  <entry xml:base="https://mitranim.com/posts/andromeda">
    <title>Game impressions: Mass Effect Andromeda</title>
    <id>https://mitranim.com/posts/andromeda</id>
    <content type="html"><![CDATA[<article role="main article" class="fan-typo"><p>Very good. Solid sequel. Worthy successor. Note: the game got patched, addressing many release problems such as faces.</p>

<ul>
<li><a href="#overview"><span class="hash-prefix noprint" aria-hidden="true">#</span>Overview</a></li>
<li><a href="#music"><span class="hash-prefix noprint" aria-hidden="true">#</span>Music</a></li>
<li><a href="#companions"><span class="hash-prefix noprint" aria-hidden="true">#</span>Companions</a></li>
<li><a href="#kinesthetics"><span class="hash-prefix noprint" aria-hidden="true">#</span>Kinesthetics</a>

<ul>
<li><a href="#enjoyable"><span class="hash-prefix noprint" aria-hidden="true">#</span>Enjoyable 👍</a></li>
<li><a href="#annoying"><span class="hash-prefix noprint" aria-hidden="true">#</span>Annoying 👎</a></li>
</ul></li>
<li><a href="#mods"><span class="hash-prefix noprint" aria-hidden="true">#</span>Mods</a></li>
</ul>
<h2 id="overview"><span class="heading-prefix" aria-hidden="true"></span>Overview<a href="#overview" class="heading-anchor" aria-hidden="true"></a></h2>
<ul>
<li>Consistently good writing.

<ul>
<li>Has tiny blemishes that got overexposed by critics.</li>
<li>Good background work.</li>
<li>Many cool ideas. Easy to overlook.</li>
<li>Many competent characters.</li>
<li>Few plot holes. Many potential holes are successfully plugged.</li>
</ul></li>
<li>Good mechanics.

<ul>
<li>Advancements over ME1/2/3.</li>
</ul></li>
<li>Sold on the premise.

<ul>
<li>Before playing, I thought going to another galaxy was just a cop-out after ME3.</li>
<li>They managed to make the premise work.</li>
<li>The premise lends itself to a different kind of Mass Effect game.</li>
</ul></li>
<li>Sold on Ryder.

<ul>
<li>Good writing.</li>
<li>Good female voice acting.</li>
<li>Enjoyable character.</li>
</ul></li>
<li>Not sold on most companions. They lack charisma.</li>
<li>They crammed two games into one. I wish there was MEA 1 about initial exploration and first contact, where the environment is the enemy, and MEA 2 about conflict. MEA has both, not nearly enough of the first, and too much of the second. Missed opportunity.</li>
</ul>
<h2 id="music"><span class="heading-prefix" aria-hidden="true"></span>Music<a href="#music" class="heading-anchor" aria-hidden="true"></a></h2>
<ul>
<li>Love the ambient music.</li>
<li>Hate the combat music.

<ul>
<li>Developers: please let us disable automatic combat music.</li>
</ul></li>
</ul>
<h2 id="companions"><span class="heading-prefix" aria-hidden="true"></span>Companions<a href="#companions" class="heading-anchor" aria-hidden="true"></a></h2>
<p>Competently done but lack charisma compared to ME1/2/3.</p>

<p>Enjoyed squad banter. Would prefer it not limited to Nomad.</p>
<details class="details fan-typo"><summary><p>Subjective grades: click to expand</p>
</summary><ul>
<li>Cora. Writing: neutral; voice acting: neutral; character: <a href="https://tvtropes.org/pmwiki/pmwiki.php/Main/Flanderization" target="_blank" rel="noopener noreferrer">flanderized<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a> asariboo; appearance: Tumblr diversity hire (unfuck with <a href="#mods"><span class="hash-prefix noprint" aria-hidden="true">#</span>mods</a>).</li>
<li>Liam. Writing: neutral; voice acting: like; character: dislike. Jacob 3.0, more immature.</li>
<li>Vetra. Writing: like; voice acting: like.</li>
<li>Peebee. Writing: like; voice acting: like; character: grew on me; face smudge: dislike (unfuck with <a href="#mods"><span class="hash-prefix noprint" aria-hidden="true">#</span>mods</a>).</li>
<li>Drack. Writing: like; voice acting: like.</li>
<li>Jaal. Writing: like; voice acting: dislike (too many pauses, inconsistent fake accent).</li>
<li>Suvi. Writing: neutral; voice acting: got used to it.</li>
<li>Kallo. Writing: neutral; voice acting: neutral. Not enough dialogs.</li>
<li>Gil. Writing: neutral; voice acting: neutral; visual: uncanny valley.</li>
<li>Lexi. Writing: like; voice acting: like. Not enough dialogs.</li>
</ul>
</details><h2 id="kinesthetics"><span class="heading-prefix" aria-hidden="true"></span>Kinesthetics<a href="#kinesthetics" class="heading-anchor" aria-hidden="true"></a></h2><h3 id="enjoyable"><span class="heading-prefix" aria-hidden="true"></span>Enjoyable 👍<a href="#enjoyable" class="heading-anchor" aria-hidden="true"></a></h3>
<ul>
<li>Movement options: jetpack, dodge, aim hover.

<ul>
<li>Default too limited. Unfuck with <a href="#mods"><span class="hash-prefix noprint" aria-hidden="true">#</span>mods</a>.</li>
</ul></li>
<li>Hotkeys for everything.</li>
<li>Ability to remap all hotkeys including UI actions.</li>
<li>Quality of Ryder animations.

<ul>
<li>Finally got specialized female animations missing from ME2/3.</li>
<li>Buggy: many moves start male, switch to female mid-animation.</li>
</ul></li>
<li>Auto-cover.</li>
</ul>
<h3 id="annoying"><span class="heading-prefix" aria-hidden="true"></span>Annoying 👎<a href="#annoying" class="heading-anchor" aria-hidden="true"></a></h3>
<ul>
<li>Hold button to interact (partially unfuck with <a href="#mods"><span class="hash-prefix noprint" aria-hidden="true">#</span>mods</a>).</li>
<li>Loot popup (unfuck with <a href="#mods"><span class="hash-prefix noprint" aria-hidden="true">#</span>mods</a>).</li>
<li>UI animations and delays.</li>
<li>Voice interruptions.

<ul>
<li>Developers: always implement a voice queue!</li>
</ul></li>
<li>Unskippable things: various cutscenes, some dialogs, Tempest transitions, etc.</li>
<li>Delayed jump animation.</li>
<li>Slow recovery from landing and dodging.</li>
<li>Lack of animation canceling.</li>
<li>Lack of animation overlap, like reloading while sprinting.</li>
<li>Separation of crafting and loadout UI.</li>
<li>I-X gear ranks.

<ul>
<li>Constant re-crafting.</li>
<li>UI bloat.</li>
<li>Inventory micromanagement.</li>
</ul></li>
<li>Slow progression of gear and skills on first playthrough.</li>
<li>Sucky melee.</li>
<li>Automatic camera rotation.</li>
<li>Inconsistent camera sensitivity.</li>
<li>Unskippable ladder climbing.</li>
<li>Inability to jump in hubs and Tempest.

<ul>
<li>Mods can fix this for hubs, but not for Tempest.</li>
</ul></li>
<li>Manual door opening.</li>
<li>Choppy loading of NPCs in hubs. Can see them briefly T-posed.</li>
<li>Updated dialog options remain greyed-out.</li>
<li>Banter triggering on fast travel before loading finishes.</li>
<li>UI bugs that crash or softlock the game.</li>
<li>Limited life support recovery inside Nomad. Makes no sense.</li>
<li>Despawn when falling X meters (unfuck with <a href="#mods"><span class="hash-prefix noprint" aria-hidden="true">#</span>mods</a>).</li>
<li>Kadara doors (unfuck with <a href="#mods"><span class="hash-prefix noprint" aria-hidden="true">#</span>mods</a>).</li>
<li>Slow loading of character previews.</li>
<li>Lackluster voices for female krogan and salarians.</li>
</ul>
<h2 id="mods"><span class="heading-prefix" aria-hidden="true"></span>Mods<a href="#mods" class="heading-anchor" aria-hidden="true"></a></h2>
<p>Credits, resources, gear progress, skill progress can be tiresome, especially on the first playthrough. Consider using CheatEngine. Credits and resources can be easily found as 4-byte integers. XP and skills require mods, see below.</p>

<p><strong>Use mods</strong> to unfuck the game. Requires <a href="https://frostytoolsuitedev.gitlab.io/downloads.html" target="_blank" rel="noopener noreferrer">Frosty Mod Manager<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a>. My mod list:</p>

<ul>
<li><a href="https://www.nexusmods.com/masseffectandromeda/mods/234" target="_blank" rel="noopener noreferrer">Hub Exploration Enabled, No Fatal Fall<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a></li>
<li><a href="https://www.nexusmods.com/masseffectandromeda/mods/760" target="_blank" rel="noopener noreferrer">Quick Loot<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a> (all in one)</li>
<li><a href="https://www.nexusmods.com/masseffectandromeda/mods/203" target="_blank" rel="noopener noreferrer">Hyper Mobility<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a> (Mk 1)</li>
<li>Better evade, <em>one of</em>:

<ul>
<li><a href="https://www.nexusmods.com/masseffectandromeda/mods/110" target="_blank" rel="noopener noreferrer">Remove Evade Cooldwon<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a></li>
<li><a href="https://www.nexusmods.com/masseffectandromeda/mods/391" target="_blank" rel="noopener noreferrer">Reduced Evade Cooldown<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a></li>
</ul></li>
<li><a href="https://www.nexusmods.com/masseffectandromeda/mods/940" target="_blank" rel="noopener noreferrer">Less Interaction Time and Less Omni Tool Interaction<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a></li>
<li><a href="https://www.nexusmods.com/masseffectandromeda/mods/467" target="_blank" rel="noopener noreferrer">Shorter Landing and Departure Cinematics<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a></li>
<li><a href="https://www.nexusmods.com/masseffectandromeda/mods/471" target="_blank" rel="noopener noreferrer">Faster Kadara Doors<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a></li>
<li><a href="https://www.nexusmods.com/masseffectandromeda/mods/231" target="_blank" rel="noopener noreferrer">Research No Level Requirements<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a></li>
<li><a href="https://www.nexusmods.com/masseffectandromeda/mods/569" target="_blank" rel="noopener noreferrer">More Skill Points<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a> (version F)</li>
<li>Inventory tweaks. <em>Only one will work</em>:

<ul>
<li><a href="https://www.nexusmods.com/masseffectandromeda/mods/366" target="_blank" rel="noopener noreferrer">Mod Slot Equality<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a></li>
<li><a href="https://www.nexusmods.com/masseffectandromeda/mods/261" target="_blank" rel="noopener noreferrer">Better Deconstruction<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a></li>
</ul></li>
<li><a href="https://www.nexusmods.com/masseffectandromeda/mods/177" target="_blank" rel="noopener noreferrer">No Profile Switching Cooldown<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a></li>
<li><a href="https://www.nexusmods.com/masseffectandromeda/mods/111" target="_blank" rel="noopener noreferrer">Shut up SAM<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a> (Exploration, AVP)</li>
<li><a href="https://www.nexusmods.com/masseffectandromeda/mods/402" target="_blank" rel="noopener noreferrer">No Scope No Problem<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a></li>
<li><a href="https://www.nexusmods.com/masseffectandromeda/mods/541" target="_blank" rel="noopener noreferrer">MEA Fixpack<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a> (requires mod manager 1.0.6 or higher)</li>
<li><a href="https://www.nexusmods.com/masseffectandromeda/mods/439" target="_blank" rel="noopener noreferrer">Skip Bioware Logo<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a></li>
<li><a href="https://www.nexusmods.com/masseffectandromeda/mods/291" target="_blank" rel="noopener noreferrer">Peebee Tweak<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a> (version 2.0, scroll down in files)</li>
<li>Better Cora appearance, combination of:

<ul>
<li><a href="https://www.nexusmods.com/masseffectandromeda/mods/399" target="_blank" rel="noopener noreferrer">Cora Armor<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a> (Asari Underarmor as Casual Outfit and Large Ponytail Blonde; Ponytail Recolor Gold Blond)</li>
<li><a href="https://www.nexusmods.com/masseffectandromeda/mods/755" target="_blank" rel="noopener noreferrer">WG Cora<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a> (Ponytail Recolor Gold Blond)</li>
<li><a href="https://www.nexusmods.com/masseffectandromeda/mods/730" target="_blank" rel="noopener noreferrer">Huntress Cora Complexion<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a></li>
</ul></li>
<li>Nomad improvements. <em>Only one will work</em>:

<ul>
<li><a href="https://www.nexusmods.com/masseffectandromeda/mods/761" target="_blank" rel="noopener noreferrer">Fast Mining<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a></li>
<li><a href="https://www.nexusmods.com/masseffectandromeda/mods/468" target="_blank" rel="noopener noreferrer">Nomad Top Speed Increase<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a> (with 3x boost time)</li>
</ul></li>
<li><a href="https://www.nexusmods.com/masseffectandromeda/mods/242" target="_blank" rel="noopener noreferrer">General Augs Rebalanced<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a></li>
<li><a href="https://www.nexusmods.com/masseffectandromeda/mods/880" target="_blank" rel="noopener noreferrer">Larger Enemy Groups<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a></li>
<li><a href="https://www.nexusmods.com/masseffectandromeda/mods/778" target="_blank" rel="noopener noreferrer">No Combo Cooldown<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a></li>
<li><a href="https://www.nexusmods.com/masseffectandromeda/mods/855" target="_blank" rel="noopener noreferrer">Skip Intro Straight to Waking up from Cryo<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a> (<em>only</em> for new playthroughs)</li>
<li><a href="https://www.nexusmods.com/masseffectandromeda/mods/786" target="_blank" rel="noopener noreferrer">Smooth Planet Approach<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a></li>
<li><a href="https://www.nexusmods.com/masseffectandromeda/mods/464" target="_blank" rel="noopener noreferrer">Straight To 100<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a></li>
<li><a href="https://www.nexusmods.com/masseffectandromeda/mods/508" target="_blank" rel="noopener noreferrer">Better Backup Life Support<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a></li>
<li><a href="https://www.nexusmods.com/masseffectandromeda/mods/257" target="_blank" rel="noopener noreferrer">Cheap Research<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a></li>
</ul>
</article>]]></content>
    <published>2022-01-23T07:43:31Z</published>
    <updated>2022-01-23T07:43:31Z</updated>
    <link rel="alternate" href="https://mitranim.com/posts/andromeda"></link>
    <summary type="html"><![CDATA[Enjoyed, highly recommended.]]></summary>
    <author>
      <name>Nelo Mitranim</name>
      <email>me@mitranim.com</email>
    </author>
  </entry>
  <entry xml:base="https://mitranim.com/posts/goex">
    <title>Shorten your Go code by using exceptions</title>
    <id>https://mitranim.com/posts/goex</id>
    <content type="html"><![CDATA[<article role="main article" class="fan-typo"><p>This post is informed by many years of Go, and months of Go with exceptions. <strong>I am well aware</strong> of many arguments for error values. Some of them are addressed below.</p>

<p>Reddit discussion: <a href="https://www.reddit.com/r/golang/comments/r2h31i/shorten_your_go_code_by_using_exceptions/" target="_blank" rel="noopener noreferrer">https://www.reddit.com/r/golang/comments/r2h31i/shorten_your_go_code_by_using_exceptions/<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a></p>

<ul>
<li><a href="#myths-to-debunk"><span class="hash-prefix noprint" aria-hidden="true">#</span>Myths to Debunk</a></li>
<li><a href="#observations"><span class="hash-prefix noprint" aria-hidden="true">#</span>Observations</a></li>
<li><a href="#performance"><span class="hash-prefix noprint" aria-hidden="true">#</span>Performance</a></li>
<li><a href="#stacktraces"><span class="hash-prefix noprint" aria-hidden="true">#</span>Stacktraces</a></li>
</ul>
<h2 id="myths-to-debunk"><span class="heading-prefix" aria-hidden="true"></span>Myths to Debunk<a href="#myths-to-debunk" class="heading-anchor" aria-hidden="true"></a></h2><blockquote class="blockquote">
<p>&ldquo;Go doesn&rsquo;t have exceptions&rdquo;.</p>
</blockquote>
<p>Go has panics, which are exceptions.</p>
<blockquote class="blockquote">
<p>&ldquo;Errors-as-values is simpler than exceptions&rdquo;.</p>
</blockquote>
<p>Decent argument that doesn&rsquo;t apply to Go. Go already has both. We don&rsquo;t get to choose to use just one.</p>
<blockquote class="blockquote">
<p>&ldquo;All errors are in function signatures&rdquo;.</p>
</blockquote>
<p>The stdlib has many documented panics. New releases frequently add more. Panics are not in function signatures.</p>
<blockquote class="blockquote">
<p>&ldquo;Panics are reserved for unrecoverable errors&rdquo;.</p>
</blockquote>
<p>Untrue in Go. Panics are recoverable and actionable. For example, HTTP servers respond with 500 and error details instead of crashing.</p>
<blockquote class="blockquote">
<p>&ldquo;Explicit errors lead to more reliable code.&rdquo;</p>
</blockquote>
<p>Decent argument that doesn&rsquo;t apply to Go. Go has panics. Reliable code <em>must</em> handle panics in addition to error values. Code that assumes &ldquo;no panics&rdquo; or &ldquo;panics always crash the process&rdquo; will have leaks, data corruption, and other unexpected states.</p>
<blockquote class="blockquote">
<p>&ldquo;Panics are expensive&rdquo;.</p>
</blockquote>
<p>Actually they&rsquo;re cheap enough.</p>
<h2 id="observations"><span class="heading-prefix" aria-hidden="true"></span>Observations<a href="#observations" class="heading-anchor" aria-hidden="true"></a></h2>
<ul>
<li>&ldquo;Just panics&rdquo; is objectively simpler than &ldquo;error values and panics&rdquo;. 1 is objectively less than 2.</li>
<li>&ldquo;Just panics&rdquo; is more reliable than &ldquo;error values and panics&rdquo;. You only need to handle 1, not 2.</li>
<li>Requires some un-doctrination, after years of trying to believe in error values.</li>
<li>Performance is nearly the same.</li>
<li>Avoids mishandling of <code>err</code> variables.</li>
<li>Exceptions and stacktraces are orthogonal. You want both.</li>
</ul>

<p>Combination of <code>defer</code> <code>panic</code> <code>recover</code> allows terse and flexible exception handling.</p>

<p>Brevity:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822"><span style="color:#f92672">import</span> <span style="color:#e6db74">&#34;github.com/mitranim/try&#34;</span>

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">outer</span>() {
  <span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">try</span>.<span style="color:#a6e22e">Detail</span>(<span style="color:#e6db74">`</span><span style="color:#e6db74">failed to do X</span><span style="color:#e6db74">`</span>)
  <span style="color:#a6e22e">someFunc</span>()
  <span style="color:#a6e22e">anotherFunc</span>()
  <span style="color:#a6e22e">moreFunc</span>()
}
</pre>
<p>Same without panics:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822"><span style="color:#f92672">import</span> <span style="color:#e6db74">&#34;github.com/mitranim/try&#34;</span>

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">outer</span>() (<span style="color:#a6e22e">err</span> <span style="color:#66d9ef">error</span>) {
  <span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">try</span>.<span style="color:#a6e22e">WithMessage</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">err</span>, <span style="color:#e6db74">`</span><span style="color:#e6db74">failed to do X</span><span style="color:#e6db74">`</span>)

  <span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">someFunc</span>()
  <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
    <span style="color:#66d9ef">return</span>
  }

  <span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">anotherFunc</span>()
  <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
    <span style="color:#66d9ef">return</span>
  }

  <span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">moreFunc</span>()
  <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
    <span style="color:#66d9ef">return</span>
  }

  <span style="color:#66d9ef">return</span>
}
</pre><h2 id="performance"><span class="heading-prefix" aria-hidden="true"></span>Performance<a href="#performance" class="heading-anchor" aria-hidden="true"></a></h2>
<p>In modern Go (1.17 and higher), there is barely any difference. Defer/panic/recover is usable even in CPU-heavy hotspot code.</p>

<p>Generating stacktraces has a far larger cost. The examples in this post use <code>github.com/mitranim/try</code> which automatically adds stacktraces by using <code>github.com/pkg/errors</code>. If you&rsquo;re using stacktraces with error values, that cost is already dominant, compared to the cost of defer/panic/recover.</p>
<h2 id="stacktraces"><span class="heading-prefix" aria-hidden="true"></span>Stacktraces<a href="#stacktraces" class="heading-anchor" aria-hidden="true"></a></h2>
<p>Stacktraces are essential to debugging, with or without exceptions.</p>

<ul>
<li>Exceptions and stacktraces are orthogonal.</li>
<li>Exceptions don&rsquo;t require stacktraces.</li>
<li>You <em>always</em> want stacktraces for debugging.

<ul>
<li>Many languages elide them for performance, but you still want them.</li>
<li>Don&rsquo;t show stacktraces to your users. They should be printed only in debug logging.</li>
</ul></li>
<li>Lack of stacktraces causes developers to <em>manually emulate stacktraces</em>.</li>
</ul>

<p>Some real Go code, written by experienced developers, has errors annotated with function names, like this:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">someFunc</span>() <span style="color:#66d9ef">error</span> {
  <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">anotherFunc</span>()
  <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Errorf</span>(<span style="color:#e6db74">`</span><span style="color:#e6db74">someFunc: %w</span><span style="color:#e6db74">`</span>, <span style="color:#a6e22e">err</span>)
  }

  <span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">moreFunc</span>()
  <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Errorf</span>(<span style="color:#e6db74">`</span><span style="color:#e6db74">someFunc: %w</span><span style="color:#e6db74">`</span>, <span style="color:#a6e22e">err</span>)
  }

  <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>
}
</pre>
<p>You can simplify this with <code>defer</code>:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822"><span style="color:#f92672">import</span> <span style="color:#e6db74">&#34;github.com/mitranim/try&#34;</span>

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">someFunc</span>() (<span style="color:#a6e22e">err</span> <span style="color:#66d9ef">error</span>) {
  <span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">try</span>.<span style="color:#a6e22e">WithMessage</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">err</span>, <span style="color:#e6db74">`</span><span style="color:#e6db74">someFunc</span><span style="color:#e6db74">`</span>)

  <span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">anotherFunc</span>()
  <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">err</span>
  }

  <span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">moreFunc</span>()
  <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">err</span>
  }

  <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">anotherFunc</span>() (<span style="color:#a6e22e">err</span> <span style="color:#66d9ef">error</span>) {
  <span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">try</span>.<span style="color:#a6e22e">WithMessage</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">err</span>, <span style="color:#e6db74">`</span><span style="color:#e6db74">anotherFunc</span><span style="color:#e6db74">`</span>)
  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">someErroringOperation</span>()
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">moreFunc</span>() (<span style="color:#a6e22e">err</span> <span style="color:#66d9ef">error</span>) {
  <span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">try</span>.<span style="color:#a6e22e">WithMessage</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">err</span>, <span style="color:#e6db74">`</span><span style="color:#e6db74">moreFunc</span><span style="color:#e6db74">`</span>)
  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">anotherErroringOperation</span>()
}
</pre>
<p>🔔 Alarm bells should be ringing in your head. This emulates a stacktrace, doing manually what other languages have automated decades ago.</p>

<p>So stop doing that. Automate your stacktraces, and shorten your code:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822"><span style="color:#f92672">import</span> <span style="color:#e6db74">&#34;github.com/mitranim/try&#34;</span>

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">someFunc</span>() {
  <span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">try</span>.<span style="color:#a6e22e">Detail</span>(<span style="color:#e6db74">`</span><span style="color:#e6db74">failed to do X</span><span style="color:#e6db74">`</span>)
  <span style="color:#a6e22e">anotherFunc</span>()
  <span style="color:#a6e22e">moreFunc</span>()
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">anotherFunc</span>() {
  <span style="color:#a6e22e">try</span>.<span style="color:#a6e22e">To</span>(<span style="color:#a6e22e">someErroringOperation</span>())
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">moreFunc</span>() {
  <span style="color:#a6e22e">try</span>.<span style="color:#a6e22e">To</span>(<span style="color:#a6e22e">anothrErroringOperation</span>())
}
</pre></article>]]></content>
    <published>2021-11-20T11:47:36Z</published>
    <updated>2021-11-20T11:47:36Z</updated>
    <link rel="alternate" href="https://mitranim.com/posts/goex"></link>
    <summary type="html"><![CDATA[Go secretly favors exceptions. Use them.]]></summary>
    <author>
      <name>Nelo Mitranim</name>
      <email>me@mitranim.com</email>
    </author>
  </entry>
  <entry xml:base="https://mitranim.com/posts/spaces-tabs">
    <title>Always spaces, never tabs</title>
    <id>https://mitranim.com/posts/spaces-tabs</id>
    <content type="html"><![CDATA[<article role="main article" class="fan-typo"><p><strong>TLDR</strong>: always spaces, never tabs; 2 spaces rather than 4.</p>
<h2 id="arguments"><span class="heading-prefix" aria-hidden="true"></span>Arguments<a href="#arguments" class="heading-anchor" aria-hidden="true"></a></h2>
<p><em>Objective</em> arguments in favor of spaces over tabs:</p>

<ul>
<li>Tabs break when copy-pasting. For example, some terminals and websites render tabs as spaces, usually as 8.</li>
<li>Mixing tabs with spaces causes indentation to break in different editors. People <em>will</em> mix them. Plenty of languages and editors don&rsquo;t have autoformatters. It will always stay this way.</li>
<li>Distinguishing tabs from spaces requires special editor support. (Rendering special whitespace symbols.)</li>
<li>Spaces are both necessary and sufficient. Tabs are not necessary and not sufficient (we don&rsquo;t use them for separating words). Adding them adds complexity.</li>
</ul>

<p><em>Objective</em> arguments in favor of tabs:</p>

<ul>
<li>Configurable visual indentation level.</li>
<li>Fewer characters. Sometimes fewer keystrokes. (Note: in decent code editors, using spaces takes just as many keystrokes.)</li>
</ul>

<p><em>Objective</em> arguments in favor of 2 spaces over 4 spaces:</p>

<ul>
<li>Fewer characters and keystrokes.</li>
<li>Easier to type in non-specialized editors, such as chat input boxes, which don&rsquo;t have indentation shortcuts.</li>
<li>Highly-nested code fits better on the screen. Relevant for markup such as XML.</li>
</ul>

<p><em>Objective</em> arguments in favor of 2 spaces over 1 space:</p>

<ul>
<li>Easier to distinguish from line wrapping. In some editors, when line wrapping is enabled, the secondary lines are intended by 1. With 2-space indentation, you can tell them apart.</li>
</ul>
<h2 id="bias"><span class="heading-prefix" aria-hidden="true"></span>Bias<a href="#bias" class="heading-anchor" aria-hidden="true"></a></h2>
<p>Your preference is influenced by your display pixel density, resolution, OS, font family, font size, eyesight, and habits. Someone with a very large but low-DPI display is likely to prefer 4 spaces. Someone who writes code on a small display, in an IDE that uses 20% of the screen area for the actual code, is likely to prefer 2 spaces.</p>

<p>If you don&rsquo;t have a strong preference, 2 spaces seems like a better default, based on the arguments above.</p>

<!--
## Variable Indentation

Some people use variable indentation. See the post [Use Fixed-Size Indentation](/posts/indent-fixed) on that.
-->
</article>]]></content>
    <published>2020-10-23T06:48:15Z</published>
    <updated>2020-10-23T06:48:15Z</updated>
    <link rel="alternate" href="https://mitranim.com/posts/spaces-tabs"></link>
    <summary type="html"><![CDATA[Objective arguments that decided my personal preference.]]></summary>
    <author>
      <name>Nelo Mitranim</name>
      <email>me@mitranim.com</email>
    </author>
  </entry>
  <entry xml:base="https://mitranim.com/posts/lisp-sexpr-hacks">
    <title>Hacks around S-expressions in Lisps</title>
    <id>https://mitranim.com/posts/lisp-sexpr-hacks</id>
    <content type="html"><![CDATA[<article role="main article" class="fan-typo"><p><strong>TLDR</strong>: nobody wants to write pure S-expressions, and Lisps are full of hacks around them.</p>

<p>Disclaimer: Lisps have decades of history and many dialects with a variety of hacks. The following is just what I happened to come across. There might be more.</p>

<p>Examples on this page use <a href="https://racket-lang.org" target="_blank" rel="noopener noreferrer">Racket<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a>.</p>
<h2 id="definitions"><span class="heading-prefix" aria-hidden="true"></span>Definitions<a href="#definitions" class="heading-anchor" aria-hidden="true"></a></h2>
<p><a href="https://en.wikipedia.org/wiki/S-expression" target="_blank" rel="noopener noreferrer">S-expressions<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a> is a syntax for binary trees. The base notation has only atoms, pairs, and nil:</p>

<pre><code>symbol       |    atom
&quot;string&quot;     |    atom
10           |    atom
(10 . 20)    |    pair
()           |    nil
</code></pre>

<p>The &ldquo;abbreviated&rdquo; notation omits <code>.</code> from pairs that end with another pair or nil, combining them into lists:</p>

<pre><code>(10)            -&gt;    (10 . ())
(10 20)         -&gt;    (10 . (20 . ()))
(10 20 30)      -&gt;    (10 . (20 . (30 . ())))
(10 20 . 30)    -&gt;    (10 . (20 . 30))
</code></pre>

<p>When talking about S-expressions as code, we usually mean the abbreviated notation, as in Lisps. Writing code in the base notation is out of the question, but pairs will come back to haunt us later. Example Lisp code:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822">(<span style="color:#66d9ef">define</span> add (<span style="color:#66d9ef">lambda</span> (a b) (+ a b)))

(<span style="color:#66d9ef">define</span> some_var (add <span style="color:#ae81ff">10</span> <span style="color:#ae81ff">20</span>))
</pre><h2 id="why"><span class="heading-prefix" aria-hidden="true"></span>Why<a href="#why" class="heading-anchor" aria-hidden="true"></a></h2>
<ul>
<li>Extremely simple.</li>
<li>Can express any computation.</li>
<li>Infinitely extensible.</li>
</ul>

<p>We can express new concepts by adding meaning to symbols such as <code>lambda</code>, <code>if</code>, and so on. Each such &ldquo;form&rdquo; will have its internal &ldquo;syntax&rdquo;, usually extremely simple, but we don&rsquo;t have to change the base notation. The cost of adding and learning new features is lower compared to other syntaxes. This also makes it easy to give <em>users</em> the ability to extend it, via AST-based macros.</p>

<p>Sidenote. Personally I like the S-expression syntax, but advocate against dynamic typing and <a href="/posts/lang-homoiconic">homoiconity</a> as seen in Lisps. We could and should use S-expressions for statically typed languages.</p>
<h2 id="hacks"><span class="heading-prefix" aria-hidden="true"></span>Hacks<a href="#hacks" class="heading-anchor" aria-hidden="true"></a></h2><h3 id="number-literals"><span class="heading-prefix" aria-hidden="true"></span>Number Literals<a href="#number-literals" class="heading-anchor" aria-hidden="true"></a></h3>
<p>S-expressions require unary negation to be written like this:</p>

<pre><code>(- num)
(- 10)
</code></pre>

<p>But <code>-10</code> was too hard to give up, so they built <code>+-</code> <em>into number literals</em>. The language&rsquo;s parser supports <code>+10</code> <code>-10</code> where the operator is part of the number&rsquo;s syntax. Note that <code>+ 10</code> <code>- 10</code> (with a space) don&rsquo;t work that way. Of course, this limited special case works <em>only</em> for literal numbers, not variables, and doesn&rsquo;t extend to other unary operators such as bitwise negation.</p>
<h3 id="prefix-operators"><span class="heading-prefix" aria-hidden="true"></span>Prefix Operators<a href="#prefix-operators" class="heading-anchor" aria-hidden="true"></a></h3>
<p>Despite claiming the opposite, Lisps have always had many prefix operators, not just <code>-10</code>.</p>

<p>Lisps have a concept of &ldquo;quoting&rdquo; code. Because the code notation <em>happens</em> to be a data notation, the quoted code can be evaluated as data. This also serves as the language&rsquo;s AST, used internally.</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822"><span style="color:#75715e">; Evaluate as code, result is `30`</span>
(add <span style="color:#ae81ff">10</span> <span style="color:#ae81ff">20</span>)

<span style="color:#75715e">; Evaluate as data, result is `(add 10 20)`</span>
(<span style="color:#66d9ef">quote</span> (<span style="color:#e6db74">add</span> <span style="color:#ae81ff">10</span> <span style="color:#ae81ff">20</span>))
</pre>
<p>Writing <code>(quote)</code> and others was too much, so they added prefix shortcuts.</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822"><span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">add</span> <span style="color:#ae81ff">10</span> <span style="color:#ae81ff">20</span>)       <span style="color:#66d9ef">-&gt;</span>    (<span style="color:#66d9ef">quote</span> (<span style="color:#e6db74">add</span> <span style="color:#ae81ff">10</span> <span style="color:#ae81ff">20</span>))
<span style="color:#f92672">`</span>(<span style="color:#e6db74">add</span> <span style="color:#ae81ff">10</span> <span style="color:#ae81ff">20</span>)       <span style="color:#66d9ef">-&gt;</span>    (<span style="color:#66d9ef">quasiquote</span> (<span style="color:#e6db74">add</span> <span style="color:#ae81ff">10</span> <span style="color:#ae81ff">20</span>))
<span style="color:#f92672">`</span>(<span style="color:#e6db74">add</span> <span style="color:#ae81ff">10</span> <span style="color:#f92672">,</span>expr)    <span style="color:#66d9ef">-&gt;</span>    (<span style="color:#66d9ef">quasiquote</span> (<span style="color:#e6db74">add</span> <span style="color:#ae81ff">10</span> (<span style="color:#66d9ef">unquote</span> expr)))
<span style="color:#f92672">`</span>(<span style="color:#e6db74">add</span> <span style="color:#f92672">,@</span>exprs)     <span style="color:#66d9ef">-&gt;</span>    (<span style="color:#66d9ef">quasiquote</span> (<span style="color:#e6db74">add</span> (<span style="color:#66d9ef">unquote-splicing</span> exprs)))
</pre>
<p>In general, all Lisp prefix operators are aliases for &ldquo;expanded&rdquo; forms. They&rsquo;re converted after or during parsing text into AST. Parsing text and converting prefix operators is combined into a step called &ldquo;reading&rdquo;, which returns a canonical AST.</p>

<p><a href="https://clojure.org/reference/reader" target="_blank" rel="noopener noreferrer">Clojure&rsquo;s reader<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a> has more prefix operators, such as <code>@A</code> → <code>(deref A)</code>, and a somewhat-generalized <code>#</code>.</p>

<p>Upside: because this is done once at &ldquo;read time&rdquo;, no other code has to deal with prefix operators. Downside: standard library and user code either can&rsquo;t define new prefix operators, or must use an API different from functions and macros.</p>
<h3 id="curly-infix"><span class="heading-prefix" aria-hidden="true"></span>Curly Infix<a href="#curly-infix" class="heading-anchor" aria-hidden="true"></a></h3>
<p>People have written large documents and reference implementations suggesting <code>{}</code> for infix. See <a href="https://srfi.schemers.org/srfi-105/srfi-105.html" target="_blank" rel="noopener noreferrer">SRFI 105<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a>. Code inside <code>{}</code> would be implicitly and unambiguously converted to the canonical form by the reader.</p>

<pre><code>{10 + 20 + 30}      -&gt;    (+ 10 20 30)
{{10 + 20} * 30}    -&gt;    (* (+ 10 20) 30)
</code></pre>

<p>Veiled in-joke or serious request? Can&rsquo;t tell&hellip;</p>

<p>It can be observed that this proposal has grouping, but no precedence. Grouping is both necessary and sufficient. Precedence is not necessary and not sufficient. Programming languages have lots of operators that don&rsquo;t exist in math, and their precedence is inconsistent between languages. Precedence errors are so insidious that some languages, like Pony, ban most forms of operator mixing and enforce grouping. This proposal, while ludicrous in the context of Lisp, has at least one good idea at its core.</p>
<h3 id="racket-infix-hack"><span class="heading-prefix" aria-hidden="true"></span>Racket Infix Hack<a href="#racket-infix-hack" class="heading-anchor" aria-hidden="true"></a></h3>
<p>Racket has a special infix hack.</p>

<p>Remember the unabbreviated <code>(a . b)</code> syntax for pairs? Racket folks have found unused &ldquo;dead space&rdquo; in the syntax they could exploit. In addition to binary <code>(a . b)</code> which makes a <em>pair</em>, it supports ternary <code>(a . b . c)</code> which makes a <em>reordered list</em>. They use <em>one</em> infix operator to enable <em>other</em> infix operators or functions in a &ldquo;general&rdquo; way.</p>

<pre><code>(10 . + . 20)               -&gt;    (+ 10 20)
((10 . + . 20) . * . 30)    -&gt;    (* (+ 10 20) 30)
</code></pre>

<p>It&rsquo;s often said that forbidden fruit is desired more strongly. Evidence suggests that when Lisp bereaves its users of infix, they develop a strong desire for more, <em>more</em> infix! (We herd you like infix, so we put more infix in your infix&hellip;)</p>
<h3 id="namespacing-in-symbols"><span class="heading-prefix" aria-hidden="true"></span>Namespacing in Symbols<a href="#namespacing-in-symbols" class="heading-anchor" aria-hidden="true"></a></h3>
<p>Most languages have some form of namespacing. Some mix several forms.</p>

<pre><code>one.two.three
one-&gt;two-&gt;three
one:two:three
one::two::three
one/two.three
</code></pre>

<p>Since inception, Lisps have allowed special characters inside symbols, and avoided infix operators. It naturally followed that Lisp package systems implement namespacing inside symbols. Common Lisp and Racket use <code>:</code>, Clojure uses <code>/</code> and <code>.</code>.</p>

<pre><code>package:identifier
namespace/identifier
value.method
</code></pre>

<p>Still a hack, because <em>useful</em> applications of these symbols involve sub-parsing them. Conceptually, these are separate identifiers combined by an infix operator. The parser (or &ldquo;reader&rdquo;) should have parsed them for you, storing the pieces in the AST. That&rsquo;s what Clojure does: its symbols are classes with separate &ldquo;namespace&rdquo; and &ldquo;name&rdquo; parts.</p>

<p>Sidenote. One simple alternative is to extend &ldquo;reader macros&rdquo; by supporting infix <code>:</code>, converting <code>one:two:three</code> to canonical <code>:(one two three)</code>. Lisps already special-case <code>.</code> in a similar way; <code>:</code> would have a higher precedence. As long as there&rsquo;s no other infix, this should parse unambiguously. Alternatively, we could ditch the pair syntax and use <code>.</code> for namespacing. Improper pairs could be printed as <code>(cons a b)</code>.</p>

<p>The major downside of the solution above, aside from added complexity, is that it&rsquo;s non-extensible, as adding more infix would create parsing ambiguities, which we can&rsquo;t resolve because we can&rsquo;t afford <code>()</code> for grouping. I would appreciate a simple and flexible approach that doesn&rsquo;t seem hacky.</p>
<h2 id="conclusion"><span class="heading-prefix" aria-hidden="true"></span>Conclusion<a href="#conclusion" class="heading-anchor" aria-hidden="true"></a></h2>
<p>If Lisp people haven&rsquo;t been able to stick with pure S-expressions, nobody will. Languages designed for practical use must include common prefix and infix shortcuts. To me, everything above seems hacky or complicated. Elegant approaches are topics for other posts.</p>
</article>]]></content>
    <published>2020-10-21T06:34:24Z</published>
    <updated>2020-10-21T06:34:24Z</updated>
    <link rel="alternate" href="https://mitranim.com/posts/lisp-sexpr-hacks"></link>
    <summary type="html"><![CDATA[How far people are willing to go to get prefix and infix in a Lisp syntax.]]></summary>
    <author>
      <name>Nelo Mitranim</name>
      <email>me@mitranim.com</email>
    </author>
  </entry>
  <entry xml:base="https://mitranim.com/posts/lang-var-minus">
    <title>Language design: gotchas with variadic minus</title>
    <id>https://mitranim.com/posts/lang-var-minus</id>
    <content type="html"><![CDATA[<article role="main article" class="fan-typo"><p><strong>TLDR</strong>: variadic <code>-</code>, as seen in Lisps, has gotchas; it may be allowed syntactically, but not as a variadic function.</p>

<p><code>-</code> tends to be overloaded with two different operations: negation and subtraction. Negation is always unary. Subtraction can be variadic. Unary subtraction is an identity function that returns the first argument unchanged <em>without negating it</em>.</p>

<pre><code>ƒ negate(a)         = 0 - a

ƒ subtract(a)       = a
ƒ subtract(a b)     = a - b
ƒ subtract(a b c)   = (a - b) - c
ƒ subtract(a b c d) = ((a - b) - c) - d
</code></pre>

<p>In math and many programming languages, there&rsquo;s no ambiguity because <code>-</code> is either unary prefix (negation) or binary infix (subtraction):</p>

<pre><code>-A       |    Negation.
B - C    |    Subtraction.
</code></pre>

<p>But in Lisps, <code>-</code> is always prefix, always variadic, and when called with a single argument, it always negates it.</p>

<p>The following examples use <a href="https://racket-lang.org" target="_blank" rel="noopener noreferrer">Racket<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a>. Let&rsquo;s dynamically pass N arguments to <code>-</code>:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822"><span style="color:#f92672">#</span>lang racket/base

(<span style="color:#66d9ef">define </span>(<span style="color:#a6e22e">subtract</span> <span style="color:#f92672">.</span> args) (apply - args))

(<span style="color:#a6e22e">println</span> (<span style="color:#a6e22e">subtract</span> <span style="color:#ae81ff">11</span> <span style="color:#ae81ff">33</span> <span style="color:#ae81ff">55</span>))
(<span style="color:#a6e22e">println</span> (<span style="color:#a6e22e">subtract</span> <span style="color:#ae81ff">11</span> <span style="color:#ae81ff">33</span>))
(<span style="color:#a6e22e">println</span> (<span style="color:#a6e22e">subtract</span> <span style="color:#ae81ff">11</span>))
</pre><pre tabindex="0" style="color:#f8f8f2;background-color:#272822"><span style="color:#ae81ff">-77</span>
<span style="color:#ae81ff">-22</span>
<span style="color:#ae81ff">-11</span> <span style="color:#75715e">; Performed negation, not subtraction!</span>
</pre>
<p>The last call performed <em>negation</em> on its only argument.</p>

<p>Correct variadic subtraction:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822"><span style="color:#f92672">#</span>lang racket/base

(<span style="color:#66d9ef">define </span>(<span style="color:#a6e22e">flip</span> fun) (<span style="color:#66d9ef">lambda </span>(<span style="color:#a6e22e">a</span> b) (<span style="color:#a6e22e">fun</span> b a)))
(<span style="color:#66d9ef">define </span>(<span style="color:#a6e22e">foldl1</span> fun seq) (<span style="color:#a6e22e">foldl</span> fun (car seq) (cdr seq)))
(<span style="color:#66d9ef">define </span>(<span style="color:#a6e22e">subtract</span> <span style="color:#f92672">.</span> args) (<span style="color:#a6e22e">foldl1</span> (<span style="color:#a6e22e">flip</span> -) args))

(<span style="color:#a6e22e">println</span> (<span style="color:#a6e22e">subtract</span> <span style="color:#ae81ff">11</span> <span style="color:#ae81ff">33</span> <span style="color:#ae81ff">55</span>))
(<span style="color:#a6e22e">println</span> (<span style="color:#a6e22e">subtract</span> <span style="color:#ae81ff">11</span> <span style="color:#ae81ff">33</span>))
(<span style="color:#a6e22e">println</span> (<span style="color:#a6e22e">subtract</span> <span style="color:#ae81ff">11</span>))
</pre>
<pre><code>-77
-22
11
</code></pre>

<p>Now, <code>11</code> was correctly returned as-is.</p>

<p>Worth comparing to Haskell, which also generalizes operators into functions, but handles <code>-</code> differently. In Haskell, the function <code>-</code> is always binary subtraction:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822"><span style="color:#a6e22e">main</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">do</span>
  print (foldl1 (<span style="color:#f92672">-</span>) [<span style="color:#ae81ff">11</span>, <span style="color:#ae81ff">33</span>, <span style="color:#ae81ff">55</span>])
  print (foldl1 (<span style="color:#f92672">-</span>) [<span style="color:#ae81ff">11</span>, <span style="color:#ae81ff">33</span>])
  print (foldl1 (<span style="color:#f92672">-</span>) [<span style="color:#ae81ff">11</span>])
</pre>
<pre><code>-77
-22
11
</code></pre>

<p>Haskell doesn&rsquo;t allow to overload functions on parameter count. You can&rsquo;t define <code>-</code> as both unary and binary. So they special-cased unary <code>-</code> in the <em>syntax</em>, converting it to <code>negate</code>:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822"><span style="color:#a6e22e">main</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">do</span>
  print (<span style="color:#f92672">-</span><span style="color:#ae81ff">11</span>)
  print (negate <span style="color:#ae81ff">11</span>)
</pre><pre tabindex="0" style="color:#f8f8f2;background-color:#272822"><span style="color:#f92672">-</span><span style="color:#ae81ff">11</span>
<span style="color:#f92672">-</span><span style="color:#ae81ff">11</span>
</pre>
<p>Lisp and Haskell create this problem for themselves by treating <code>-</code> as a function while overloading it with <em>two</em> different functions. Most languages don&rsquo;t have this problem because they don&rsquo;t have <code>-</code> as a function. Languages with operator overloading tend to differentiate between negation and subtraction. For example, Rust has <code>ops::Neg</code> and <code>ops::Sub</code>. Literal <code>-</code> is converted into calls to one of those. When passing it to a higher-order function, you either pass <code>ops::Neg::neg</code>, or <code>ops::Sub::sub</code>, avoiding the problem completely.</p>
</article>]]></content>
    <published>2020-10-17T07:20:06Z</published>
    <updated>2020-10-17T07:20:06Z</updated>
    <link rel="alternate" href="https://mitranim.com/posts/lang-var-minus"></link>
    <summary type="html"><![CDATA[Treating the minus operator as a function can be tricky and dangerous.]]></summary>
    <author>
      <name>Nelo Mitranim</name>
      <email>me@mitranim.com</email>
    </author>
  </entry>
  <entry xml:base="https://mitranim.com/posts/lang-case-conventions">
    <title>Language design: case conventions</title>
    <id>https://mitranim.com/posts/lang-case-conventions</id>
    <content type="html"><![CDATA[<article role="main article" class="fan-typo"><p><strong>TLDR</strong>: Identifiers in programming languages should use only <code>snake_case</code>, <code>Title_snake_case</code>, <code>UPPER_SNAKE_CASE</code>, ignore abbreviations, and be limited to ASCII alphanumerics with <code>_</code>.</p>

<p>This post will also touch on the structure of identifiers.</p>

<p>There was an earlier, more specialized post: <a href="/posts/camel-case-abbr">Don&rsquo;t Abbreviate In Camel-Case</a>. This one is more general.</p>
<h2 id="lower-case"><span class="heading-prefix" aria-hidden="true"></span>Lower case<a href="#lower-case" class="heading-anchor" aria-hidden="true"></a></h2>
<p><em>Objective</em> arguments in favor of <code>snake_case</code> over <code>camelCase</code>:</p>

<ul>
<li>Works in case-insensitive systems such as SQL.</li>
<li>Can remap <code>_</code> to type without Shift. (I did.)</li>
<li>Unambiguously convertible when numbers are involved.</li>
</ul>

<p>Conversion:</p>

<pre><code>one_123_two &lt;-&gt; one 123 two

one123two   &lt;-&gt; one123two
one123two   &lt;-&gt; one123 two
one123two   &lt;-&gt; one 123 two

one123Two   &lt;-&gt; one123 two
one123Two   &lt;-&gt; one 123 two
</code></pre>
<h2 id="title-case"><span class="heading-prefix" aria-hidden="true"></span>Title case<a href="#title-case" class="heading-anchor" aria-hidden="true"></a></h2>
<p><em>Objective</em> arguments in favor of <code>Title_snake_case</code> over <code>TitleCamelCase</code>:</p>

<ul>
<li>Can properly support abbreviations, for example <code>XML_HTTP_request</code>. No schizophrenia such as <code>XMLHttpRequest</code>.</li>
<li>Can remap <code>_</code> to type without Shift. Titled identifiers require only one Shift press. (I did.)</li>
<li>Consistent with <code>snake_case</code> in a language that uses it for lowercase identifiers.</li>
<li>Unambiguously convertible when numbers are involved.</li>
</ul>

<p>Conversion:</p>

<pre><code>One_123_two &lt;-&gt; one 123 two

One123two   &lt;-&gt; one123two
One123two   &lt;-&gt; one123 two
One123two   &lt;-&gt; one 123 two

One123Two   &lt;-&gt; one123 two
One123Two   &lt;-&gt; one 123 two
</code></pre>
<h2 id="abbreviations"><span class="heading-prefix" aria-hidden="true"></span>Abbreviations<a href="#abbreviations" class="heading-anchor" aria-hidden="true"></a></h2>
<p><em>Objective</em> arguments in favor of avoiding abbreviations, for example <code>Json_encoder</code> over <code>JSON_encoder</code>, or <code>JsonEncoder</code> over <code>JSONEncoder</code>:</p>

<ul>
<li>Fewer rules.</li>
<li>Less thinking.</li>
<li>Simpler code.</li>
<li>No schizophrenia such as <code>XMLHttpRequest</code>.</li>
</ul>

<p>Example from work.</p>

<p>At some point I had contact with a code base involving generating Go code from Swagger. The generator had a variety of special cases for <code>id</code>, <code>xml</code>, and some other abbreviations. A field named <code>xml_setting_id</code> would become <code>XMLSettingID</code>. However, if you used an abbreviation <em>unknown</em> to the generator, for example XSD (XML Schema Definition), <code>xsd_setting_id</code> would become <code>XsdSettingID</code>.</p>

<p>The goal was noble: be consistent with the Go standard library, which stupidly uses abbreviations, for example <code>MarshalXML</code>. But unlike the standard library, you couldn&rsquo;t just remember &ldquo;abbreviations are uppercase&rdquo;, your brain needed the database of the <em>exact</em> abbreviations special-cased in that generator. So don&rsquo;t. Don&rsquo;t use abbreviations in identifiers, and don&rsquo;t special-case them in code generators or parsers.</p>
<h2 id="characters"><span class="heading-prefix" aria-hidden="true"></span>Characters<a href="#characters" class="heading-anchor" aria-hidden="true"></a></h2>
<p><em>Objective</em> arguments in favor of restricting identifiers to ASCII alphanumerics with <code>_</code>:</p>

<ul>
<li>Interoperable between all languages.</li>
<li>Works in all encodings.</li>
<li>Works in all Latin keyboard layouts.</li>
</ul>

<p>Example from work.</p>

<p>At some point, we at Purelab were using Clojure and Datomic to build apps. Clojure symbols (Lisp equivalent of identifiers) use <code>kebab-case</code> and may contain operator characters such as <code>-?</code>. Booleans are expected to end with a question: <code>hidden?</code> instead of <code>is_hidden</code>.</p>

<p>Datomic has its own idiosyncrasy: column names are global and include the entity type. So, instead of this:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822"><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> persons (is_email_verified bool <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span> <span style="color:#66d9ef">default</span> <span style="color:#66d9ef">false</span>);
</pre>
<p>&hellip;you use this:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822">{<span style="color:#e6db74">:db/ident</span>     <span style="color:#e6db74">:person/email-verified?</span>
 <span style="color:#e6db74">:db/valueType</span> <span style="color:#e6db74">:db.type/boolean</span>}
</pre>
<p>For simplicity, let&rsquo;s suppose we use Postgres, and have a JS client. You have to either break the SQL and JS conventions by quoting the field:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822"><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> persons (<span style="color:#e6db74">&#34;</span><span style="color:#e6db74">email-verified?</span><span style="color:#e6db74">&#34;</span> bool <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">null</span> <span style="color:#66d9ef">default</span> <span style="color:#66d9ef">false</span>);
</pre><pre tabindex="0" style="color:#f8f8f2;background-color:#272822"><span style="color:#a6e22e">person</span>[<span style="color:#e6db74">&#39;email-verified?&#39;</span>]
</pre>
<p>&hellip;or break the Clojure convention by using the interoperable format:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822"><span style="color:#e6db74">:is_email_verified</span>
</pre><h2 id="footnote-on-lisp-symbols"><span class="heading-prefix" aria-hidden="true"></span>Footnote on Lisp symbols<a href="#footnote-on-lisp-symbols" class="heading-anchor" aria-hidden="true"></a></h2>
<p>Lisps allow identifiers like <code>email-verified?</code> because they don&rsquo;t distinguish identifiers and operators. They just have &ldquo;symbols&rdquo;. This has various problems.</p>

<ul>
<li>People define custom operators, creating inscrutable code. Popular in Haskell. What the hell is <code>&gt;&gt;=</code>? With <code>bind</code>, you can at least start <em>guessing</em> the purpose, or pronounce it, or google it, what a feat!</li>
<li>Leads to hacks like embedding <code>: / .</code> in symbols to implement namespacing (Common Lisp, Clojure). This requires re-parsing the symbol, something the AST should have done for you. Clojure symbols are classes with &ldquo;namespace&rdquo; and &ldquo;name&rdquo; parts, indicating that they were combined prematurely. The AST should split alphanumerics and operators from the start.</li>
</ul>
<h2 id="conclusion"><span class="heading-prefix" aria-hidden="true"></span>Conclusion<a href="#conclusion" class="heading-anchor" aria-hidden="true"></a></h2>
<p>When making a language, follow the conventions listed at the top. Let&rsquo;s solve this forever and move on.</p>
</article>]]></content>
    <published>2020-10-16T15:30:41Z</published>
    <updated>2020-10-16T15:30:41Z</updated>
    <link rel="alternate" href="https://mitranim.com/posts/lang-case-conventions"></link>
    <summary type="html"><![CDATA[Objective arguments to solve case conventions and move on.]]></summary>
    <author>
      <name>Nelo Mitranim</name>
      <email>me@mitranim.com</email>
    </author>
  </entry>
  <entry xml:base="https://mitranim.com/posts/lang-homoiconic">
    <title>Language design: homoiconicity</title>
    <id>https://mitranim.com/posts/lang-homoiconic</id>
    <content type="html"><![CDATA[<article role="main article" class="fan-typo"><p><strong>TLDR</strong>: Homoiconicity simplifies what was already trivial, while leading to poor design choices.</p>
<h2 id="disclaimer"><span class="heading-prefix" aria-hidden="true"></span>Disclaimer<a href="#disclaimer" class="heading-anchor" aria-hidden="true"></a></h2>
<p>While this post is highly critical, it comes from a fan. I used Clojure for years, dabbled in other Lisps, wrote a few parsers and compilers. Even if this concept is not good language design, it&rsquo;s still pretty cool.</p>
<h2 id="definition"><span class="heading-prefix" aria-hidden="true"></span>Definition<a href="#definition" class="heading-anchor" aria-hidden="true"></a></h2>
<p><em>Homoiconicity</em> is when the entirety of a language&rsquo;s syntax matches the literal syntax of some of its data structures.</p>

<p>This <strong>does not</strong> just mean that we can convert this text:</p>

<pre><code>(10 &quot;20&quot;)
</code></pre>

<p>Into some library-defined type:</p>

<pre><code>ast.LinkedList{ast.Number{&quot;10&quot;}, ast.String{&quot;20&quot;}}
</code></pre>

<p>This means <code>(10 &quot;20&quot;)</code> is the literal syntax for that AST type. In other words, the expression <code>(10 &quot;20&quot;)</code> gives your program a copy of the AST node that the parser generated for this expression when parsing that program. Sometimes with caveats:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822"><span style="color:#75715e">; The quote tells the compiler: this list is not a function call.</span>
<span style="color:#f92672">&#39;</span>(<span style="color:#ae81ff">10</span> <span style="color:#e6db74">&#34;20&#34;</span>)

<span style="color:#75715e">; The quote tells the compiler: this symbol should not be evaluated.</span>
<span style="color:#e6db74">&#39;ident</span>
</pre>
<p>This quality can simplify the language and macros (not by much). It requires the language to be dynamically typed, or have a dynamically typed subset.</p>
<h2 id="defects"><span class="heading-prefix" aria-hidden="true"></span>Defects<a href="#defects" class="heading-anchor" aria-hidden="true"></a></h2>
<ul>
<li>Requires silly data types to be built in.</li>
<li>Loses useful information.</li>
</ul>
<h3 id="symbols"><span class="heading-prefix" aria-hidden="true"></span>Symbols<a href="#symbols" class="heading-anchor" aria-hidden="true"></a></h3>
<p>Our language probably has identifiers: names for variables, functions, operators, and so on. To distinguish them from strings, we must introduce a new data type: &ldquo;symbol&rdquo;.</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822"><span style="color:#75715e">; This unquoted symbol is evaluated as a variable.</span>
blah
<span style="color:#75715e">; This quoted symbol is evaluated as data.</span>
<span style="color:#e6db74">&#39;blah</span>
<span style="color:#75715e">; Strings are considered distinct from symbols.</span>
<span style="color:#e6db74">&#34;blah&#34;</span>
</pre>
<p>Setting macros aside, from the perspective of data modeling, having symbols is <em>bad</em>. They&rsquo;re just strings by another name, but everyone has to <em>choose</em> between symbols and strings. Library APIs will make different choices and conventions. Using external data formats gets more difficult, because they usually support only strings (see JSON).</p>

<p>It gets crazier. Common Lisp and Clojure have <em>keywords</em>, which are symbols with minute differences and their own syntax. Everyone using those languages must spend time and effort choosing between strings, symbols, and keywords, dealing with idiosyncratic APIs, and dealing with conversions. I know I have.</p>

<p>Side note: some languages with symbol-like data types support interning, which allows to compare them as integers. In dynamic languages, this can be a minor performance hack. Can also be a memory leak. Static languages don&rsquo;t need it. It&rsquo;s not worth it.</p>
<h3 id="impossible-literals"><span class="heading-prefix" aria-hidden="true"></span>Impossible Literals<a href="#impossible-literals" class="heading-anchor" aria-hidden="true"></a></h3>
<p>We can probably agree that code auto-formatting is great. We can also probably agree that generating documentation from comments is simpler and more universal than special-case support for doc strings. But in any given homoiconic language, comments and whitespace are missing from the AST.</p>

<p>We probably don&rsquo;t want to define a different AST and write a different parser. Which means our &ldquo;main&rdquo; AST generated by the parser must preserve comments and whitespace. Since all the other AST types are built-in, this requires built-in types for comments and whitespace. Internally, they would just be strings. Just like with symbols, we&rsquo;ve added more string-like types that should be limited to the AST, yet are built-in, easily available, and <em>will</em> be used where they shouldn&rsquo;t be. Or would be, unless&hellip;</p>

<p>Homoiconicity seems to require that every data type in the AST is instantiated using the <em>exact same syntax</em> from which it was parsed. So, how do I assign literal whitespace to a variable? How do I assign a comment?</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822">(define whitespace

(define comment   <span style="color:#75715e">; This doesn&#39;t get evaluated!</span>
</pre><h3 id="information-loss"><span class="heading-prefix" aria-hidden="true"></span>Information Loss<a href="#information-loss" class="heading-anchor" aria-hidden="true"></a></h3>
<p>Comments and whitespace isn&rsquo;t the only information lost. Some data types might have N inputs for 1 output. One example is numbers:</p>

<pre><code>0b110011
0x33
51
</code></pre>

<p>All of these would be parsed into just <code>51</code>, losing the information about the original formatting. Even if we had preserved comments and whitespace in the AST, we can&rsquo;t print the original code back!</p>
<h2 id="triviality"><span class="heading-prefix" aria-hidden="true"></span>Triviality<a href="#triviality" class="heading-anchor" aria-hidden="true"></a></h2>
<p>One decent upshot is that it simplifies macros. In Lisps, you can just quote a bit of code, return it from a macro, and it counts as valid AST:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822">(defun sum (vals) (<span style="color:#a6e22e">reduce</span> <span style="color:#e6db74">&#39;+</span> vals))

(defmacro trivial () <span style="color:#f92672">&#39;</span>(sum <span style="color:#f92672">&#39;</span>(<span style="color:#ae81ff">10</span> <span style="color:#ae81ff">20</span> <span style="color:#ae81ff">30</span>)))
</pre>
<p>All that&rsquo;s needed of macros is to return AST nodes. Programmatically manipulating an AST doesn&rsquo;t require special syntactic support. Calling <code>map</code> or <code>head</code>/<code>rest</code> on an AST doesn&rsquo;t care about its text representation. AST types could be defined somewhere in the standard library. Macros would import that module to use its types and functions. Non-trivial macros are already inscrutable, so we&rsquo;re not losing much readability.</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822">(<span style="color:#a6e22e">import</span> std:ast)

(defmacro trivial ()
  (ast:list
    (ast:sym <span style="color:#e6db74">&#34;sum&#34;</span>)
    (ast:quote (ast:list (ast:num <span style="color:#e6db74">&#34;10&#34;</span>) (ast:num <span style="color:#e6db74">&#34;20&#34;</span>) (ast:num <span style="color:#e6db74">&#34;30&#34;</span>)))))
</pre>
<p>But instead, the language could convert quoted code into types from the AST module. So we&rsquo;re back to:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822">(defmacro trivial () <span style="color:#f92672">&#39;</span>(sum <span style="color:#f92672">&#39;</span>(<span style="color:#ae81ff">10</span> <span style="color:#ae81ff">20</span> <span style="color:#ae81ff">30</span>)))
</pre>
<p>What got simplified wasn&rsquo;t your code. It was the implementation of macro support in the language. Meanwhile, you got saddled with unnecessary data types and an inferior AST!</p>
</article>]]></content>
    <published>2020-10-16T12:41:58Z</published>
    <updated>2020-10-16T12:41:58Z</updated>
    <link rel="alternate" href="https://mitranim.com/posts/lang-homoiconic"></link>
    <summary type="html"><![CDATA[Thoughts on homoiconicity, an interesting language quality seen in Lisps.]]></summary>
    <author>
      <name>Nelo Mitranim</name>
      <email>me@mitranim.com</email>
    </author>
  </entry>
  <entry xml:base="https://mitranim.com/posts/warframe-headcanon">
    <title>Warframe headcanon (spoilers)</title>
    <id>https://mitranim.com/posts/warframe-headcanon</id>
    <content type="html"><![CDATA[<article role="main article" class="fan-typo"><p>Collection of headcanon for <a href="https://warframe.com" target="_blank" rel="noopener noreferrer">Warframe<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a>, <strong>co-authored by friends</strong> and myself. This post contains <strong>massive unmarked spoilers</strong>. By the nature of headcanon, this should only be read by someone who&rsquo;s completed all story quests. If you haven&rsquo;t, <strong>get out now</strong> and return once you have. <span aria-hidden="true">🙂</span></p>

<!--
Generating the ASCII figure:

    import "github.com/common-nighthawk/go-figure"

    fmt.Println(fig("SP"))
    fmt.Println(fig("OI"))
    fmt.Println(fig("LE"))
    fmt.Println(fig("RS"))

    func fig(str string) string {
      return figure.NewFigure(str, "", true).String()
    }
-->

<pre aria-hidden="true">
 ____    ____
/ ___|  |  _ \
\___ \  | |_) |
 ___) | |  __/
|____/  |_|
  ___    ___
 / _ \  |_ _|
| | | |  | |
| |_| |  | |
 \___/  |___|
 _       _____
| |     | ____|
| |     |  _|
| |___  | |___
|_____| |_____|
 ____    ____
|  _ \  / ___|
| |_) | \___ \
|  _ <   ___) |
|_| \_\ |____/
</pre>
<h2 id="table-of-contents"><span class="heading-prefix" aria-hidden="true"></span>Table of Contents<a href="#table-of-contents" class="heading-anchor" aria-hidden="true"></a></h2>
<ul>
<li><a href="#table-of-contents"><span class="hash-prefix noprint" aria-hidden="true">#</span>Table of Contents</a></li>
<li><a href="#non-primes"><span class="hash-prefix noprint" aria-hidden="true">#</span>Non-primes existed in Orokin times</a></li>
<li><a href="#decoy-reactors"><span class="hash-prefix noprint" aria-hidden="true">#</span>Corpus and Grineer ships have decoy reactors for Tenno sabotage raids</a></li>
<li><a href="#mass-ignorance"><span class="hash-prefix noprint" aria-hidden="true">#</span>Mass-produced enemy units are ignorant about the Tenno threat level</a></li>
<li><a href="#kavats"><span class="hash-prefix noprint" aria-hidden="true">#</span>Feral kavats and Tenno kavats are the animal equivalent of warframes</a></li>
<li><a href="#vauban"><span class="hash-prefix noprint" aria-hidden="true">#</span>Vauban is some Corpus guy pretending to be a warframe</a></li>
<li><a href="#tenno-peaceframes"><span class="hash-prefix noprint" aria-hidden="true">#</span>Human-looking Tenno associates are &ldquo;peaceframes&rdquo;</a></li>
<li><a href="#operator-peaceframes"><span class="hash-prefix noprint" aria-hidden="true">#</span>Hypothesis: operators are &ldquo;peaceframes&rdquo;</a></li>
<li><a href="#tenno-digital"><span class="hash-prefix noprint" aria-hidden="true">#</span>Hypothesis: Tenno are digital minds (busted)</a></li>
<li><a href="#tenno-children"><span class="hash-prefix noprint" aria-hidden="true">#</span>Hypotheses about the Zariman children</a>

<ul>
<li><a href="#hypothesis-void-temporal-anomaly-resulting-in-long-journey"><span class="hash-prefix noprint" aria-hidden="true">#</span>Hypothesis: Void temporal anomaly resulting in long journey</a></li>
<li><a href="#hypothesis-the-zariman-did-reach-tau"><span class="hash-prefix noprint" aria-hidden="true">#</span>Hypothesis: the Zariman did reach Tau</a></li>
<li><a href="#hypothesis-adults-turned-into-children"><span class="hash-prefix noprint" aria-hidden="true">#</span>Hypothesis: adults turned into children</a></li>
<li><a href="#hypothesis-the-void-made-them"><span class="hash-prefix noprint" aria-hidden="true">#</span>Hypothesis: the Void made them</a></li>
</ul></li>
<li><a href="#void-entity"><span class="hash-prefix noprint" aria-hidden="true">#</span>Void entity hypotheses</a>

<ul>
<li><a href="#void-entity-manmade"><span class="hash-prefix noprint" aria-hidden="true">#</span>The Void entity is manmade</a></li>
<li><a href="#mitw-rell"><span class="hash-prefix noprint" aria-hidden="true">#</span>Man-in-the-wall vs. Rell</a></li>
</ul></li>
<li><a href="#stalker"><span class="hash-prefix noprint" aria-hidden="true">#</span>Stalker hypotheses</a>

<ul>
<li><a href="#stalker-tenno-woke"><span class="hash-prefix noprint" aria-hidden="true">#</span>Hypothesis: Stalker is a renegade Tenno that woke up from the Dream and doesn&rsquo;t use a warframe</a></li>
<li><a href="#stalker-tenno-dreaming"><span class="hash-prefix noprint" aria-hidden="true">#</span>Hypothesis: Stalker is a renegade Tenno that&rsquo;s still in the Dream</a></li>
<li><a href="#stalker-warframe"><span class="hash-prefix noprint" aria-hidden="true">#</span>Hypothesis: Stalker is a warframe that regained its mind, possibly a former Dax</a></li>
<li><a href="#stalker-human"><span class="hash-prefix noprint" aria-hidden="true">#</span>Hypothesis: Stalker is a normal human wearing armor made of warframes, possibly Dax or Orokin</a></li>
</ul></li>
<li><a href="#orokin-creation"><span class="hash-prefix noprint" aria-hidden="true">#</span>The Orokin are made this way rather than born</a></li>
<li><a href="#orokin"><span class="hash-prefix noprint" aria-hidden="true">#</span>The Orokin society is still around, in the Void and/or other solar systems</a></li>
<li><a href="#baro-orokin-market"><span class="hash-prefix noprint" aria-hidden="true">#</span>Baro gets his stuff in the Orokin market</a></li>
<li><a href="#tenno-and-sentients"><span class="hash-prefix noprint" aria-hidden="true">#</span>Hypothesis: Tenno teamed up with Sentients to crush the Orokin</a></li>
<li><a href="#derelict-capture"><span class="hash-prefix noprint" aria-hidden="true">#</span>Derelict capture targets are survivors of Tenno raids</a></li>
<li><a href="#cy"><span class="hash-prefix noprint" aria-hidden="true">#</span>Cephalon Cy is corrhupted by Sentients</a></li>
<li><a href="#kuva-liches-imprisoned"><span class="hash-prefix noprint" aria-hidden="true">#</span>Converted Kuva Liches get caught and imprisoned in Kuva Fortress</a></li>
<li><a href="#grineer-alarms"><span class="hash-prefix noprint" aria-hidden="true">#</span>Grineer get special alarm training</a></li>
<li><a href="#bigger-inside"><span class="hash-prefix noprint" aria-hidden="true">#</span>Most ships and space stations are bigger on the inside</a></li>
<li><a href="#railjack-skins"><span class="hash-prefix noprint" aria-hidden="true">#</span>Railjack skins are external holographic projections</a></li>
<li><a href="#lotus-multitask"><span class="hash-prefix noprint" aria-hidden="true">#</span>Lotus supervises all Tenno operations personally and simultaneously</a></li>
<li><a href="#quills-eidolon-lures"><span class="hash-prefix noprint" aria-hidden="true">#</span>Quills came up with Eidolon Lures</a></li>
<li><a href="#murmurs"><span class="hash-prefix noprint" aria-hidden="true">#</span>Kuva Lich murmurs represent tapping into Grineer transmissions and listening to rumors</a></li>
<li><a href="#warframes-autonomous"><span class="hash-prefix noprint" aria-hidden="true">#</span>Many warframes acted autonomously for long periods of time</a></li>
<li><a href="#hostages"><span class="hash-prefix noprint" aria-hidden="true">#</span>Hostages get recaptured all the time because we leave them behind</a></li>
<li><a href="#teshin-kuva"><span class="hash-prefix noprint" aria-hidden="true">#</span>Teshin can command himself by using the Kuva Scepter</a></li>
<li><a href="#inaros-makeup"><span class="hash-prefix noprint" aria-hidden="true">#</span>Inaros is made of nanobots</a></li>
<li><a href="#orokin-drones-are-indoctrination-devices"><span class="hash-prefix noprint" aria-hidden="true">#</span>Orokin Drones are indoctrination devices</a></li>
</ul>
<h2 id="non-primes"><span class="heading-prefix" aria-hidden="true"></span>Non-primes existed in Orokin times<a href="#non-primes" class="heading-anchor" aria-hidden="true"></a></h2>
<div class="img-box"><a class="img-box-padder" style="padding-top: calc(342/512*100%)" href="https://warframe.fandom.com/wiki/Braton" target="_blank" rel="noopener noreferrer"><img src="/images/warframe/braton.png" alt="Braton" class="img-box-img"></a><span class="img-box-caption" aria-hidden="true">Braton</span></div>

<div class="img-box"><a class="img-box-padder" style="padding-top: calc(342/512*100%)" href="https://warframe.fandom.com/wiki/Braton_Prime" target="_blank" rel="noopener noreferrer"><img src="/images/warframe/braton_prime.png" alt="Braton Prime" class="img-box-img"></a><span class="img-box-caption" aria-hidden="true">Braton Prime</span></div>

<p>Prime warframes and weapons were made exclusively in the Orokin times, while non-primes can be manufactured from scratch right now. Non-primes could be cheap knock-offs of the originals, but they could also <em>be</em> the originals, the prototypes, later refined with superior materials and designs <span aria-hidden="true">✨</span>.</p>

<p>The Old War cutscenes feature prime warframes and weapons. However, the Leverian, Chains of Harrow, and the Deadlock Protocol specifically place non-primes in the Orokin era. Both Harrow and Protea, found in their respective quests, are non-primes that have stuck around for hundreds of years.</p>

<p>One sensible explanation is that most warframes and weapons started off as non-prime prototypes. Many weapons are specifically said to be of Tenno design, implying later refinement by the Orokin. Several warframes are attributed directly to prominent Orokin or Archimedians, but there&rsquo;s no reason why they couldn&rsquo;t have iterated on the design. Some weapons, like the Euphona Prime, may have started off as a prime; alternatively, the non-prime prototype blueprints may have been lost.</p>
<h2 id="decoy-reactors"><span class="heading-prefix" aria-hidden="true"></span>Corpus and Grineer ships have decoy reactors for Tenno sabotage raids<a href="#decoy-reactors" class="heading-anchor" aria-hidden="true"></a></h2>
<p>Infested versions of Corpus and Grineer ships tend to be dark, implying running on reserve power. Reserve power implies reserve reactors. We supposedly sabotage a ship&rsquo;s main reactor, but does that really detonate the entire ship, or kill the crew due to failing life support? One would expect that after so many raids, they would start installing reserve reactors and decoy reactors, possibly in a ship section that can be jettisoned away. It&rsquo;s just more economical compared to losing entire ships.</p>
<h2 id="mass-ignorance"><span class="heading-prefix" aria-hidden="true"></span>Mass-produced enemy units are ignorant about the Tenno threat level<a href="#mass-ignorance" class="heading-anchor" aria-hidden="true"></a></h2>
<div class="img-box"><a class="img-box-padder" style="padding-top: calc(417/640*100%)" href="https://warframe.fandom.com/wiki/Jackal" target="_blank" rel="noopener noreferrer"><img src="/images/warframe/jackal.jpg" alt="Jackal" class="img-box-img"></a><span class="img-box-caption" aria-hidden="true">Jackal</span></div>

<p>Corpus and Grineer infantry, as well as mass-produced bosses such as the Jackal, seem suicidally brave when facing Tenno.</p>

<p>Think about it. The kill count of an individual Tenno is often somewhere in the millions. Each is a one-man army that can <em>personally</em> genocide an entire nation, <em>and did so</em>. They can&rsquo;t be killed for good and regenerate from any injuries. They&rsquo;re liable to dismember you within seconds of visual contact, or without visual contact, and that&rsquo;s <em>going easy</em> on you. They will hack off your limbs and watch you bleed to death, infest you with techno-bio-parasites, burn you to death, melt your flesh with horrible chemicals, crush you into smooth paste with force fields, mind control you into killing squadmates and friends, and more. And laugh while doing so. And then they <em>come in groups</em>.</p>

<p>They have pets to match. They show up on the Infested Derelict where nobody dares to set foot without an army, looking for <em>cuddly pets</em>: feral kavats, transformed by hundreds of years among the Infestation into an <a href="#kavats"><span class="hash-prefix noprint" aria-hidden="true">#</span>animal equivalent of warframes</a>. The kavats get further augmented with Orokin Reactors and mods. They can&rsquo;t be killed for good and regenerate from any injuries. These &ldquo;pets&rdquo; are liable to tear you in half and feast on you in the middle of a battlefield. And the Tenno consider them <em>cute</em> and hold fashion contests.</p>

<p>A sane person&rsquo;s response in the face of this overwhelming threat? Run away! As far as you can, as fast as you can! Tribunal? Punishment for disobeying orders? Probably better than horrible dismemberment <em>right now</em>. Band with your ship&rsquo;s crew and abscond together! Become a rogue faction or join the Perrin Sequence! Try to ally with the Tenno if you can, because you lost the alternatives the moment they showed up.</p>

<p>Meanwhile, what do we see?</p>

<p>The Jackal:</p>

<ul>
<li>&ldquo;Pathetic organics require sterilization.&rdquo;</li>
<li>&ldquo;Tenno victory probability: inconceivable.&rdquo;</li>
<li>At <sup>1</sup>&frasl;<sub>4</sub> health: &ldquo;Trivial threat detected.&rdquo;</li>
</ul>

<p>The Raptors:</p>

<ul>
<li>&ldquo;Analyzing Threat Intelligence: Under-developed.&rdquo; (True but won&rsquo;t save it.)</li>
<li>&ldquo;Analyzing Threat Weaponry: Unimpressive.&rdquo;</li>
<li>&ldquo;Analyzing Threat Vitality: Target Death Imminent.&rdquo;</li>
</ul>

<p>The Sergeant:</p>

<ul>
<li>&ldquo;From pods you have come, in caskets you will go!&rdquo;</li>
<li>&ldquo;Fashion victims about to become murder victims!&rdquo;</li>
<li>&ldquo;This [FRAME] would look great hanging on my wall!&rdquo;</li>
</ul>

<p>Corpus infantry (translated):</p>

<ul>
<li>&ldquo;Nullify targets!&rdquo;</li>
<li>&ldquo;Exterminate hostiles!&rdquo;</li>
<li>&ldquo;Engaging fighting protocols!&rdquo;</li>
</ul>

<p>Grineer infantry (translated):</p>

<ul>
<li>&ldquo;Warframe spotted!&rdquo;</li>
<li>&ldquo;It&rsquo;s the Tenno, attack!&rdquo;</li>
<li>&ldquo;Die, you Tenno son-of-a-bitch!&rdquo;</li>
<li>&ldquo;Don&rsquo;t let them get away!&rdquo;</li>
</ul>

<p>One logical explanation is that the mass-cloned or mass-manufactured units are intentionally kept ignorant about the Tenno threat level. They know about Tenno in general, but in the best traditions of military propaganda, must be led to believe that the Tenno are weak and cowardly (but somehow also responsible for many atrocities).</p>

<p>What about the robots, such as the Jackal and the Raptors? One possibility is that their artificial intelligence is too complicated and lifelike; Corpus couldn&rsquo;t separate the combat data from the emotional trauma caused by the Tenno raids. Or even better, after analyzing the combat data, the onboard intelligence correctly concludes that the probability of victory against Tenno is around 0.0001%, and the most effective combat tactic is to play dead until the Tenno leave, nullifying its combat effectiveness. Leaving Corpus with no choice but to reset the data every time.</p>
<h2 id="kavats"><span class="heading-prefix" aria-hidden="true"></span>Feral kavats and Tenno kavats are the animal equivalent of warframes<a href="#kavats" class="heading-anchor" aria-hidden="true"></a></h2>
<div class="img-box"><a class="img-box-padder" style="padding-top: calc(256/256*100%)" href="https://warframe.fandom.com/wiki/Feral_Kavat" target="_blank" rel="noopener noreferrer"><img src="/images/warframe/feral_kavat.png" alt="Feral Kavat" class="img-box-img"></a><span class="img-box-caption" aria-hidden="true">Feral Kavat</span></div>

<p>On the Orokin Derelict, feral kavats have lived alongside the Infestation for hundreds of years. By now, all organic materials aboard, along with many inorganics, have been converted to Infested biomass. The kavats survive by feeding on it. There have to be repercussions. Their supposed &ldquo;immunity&rdquo; is not absolute; they&rsquo;ve been gradually altered, fur being replaced by scales, tails and shoulders forming something resembling cysts, and so on. In Ballas&rsquo;s words: &ldquo;Transformed, but only just&rdquo;.</p>

<p>One wonders if this alteration affects their genetics. The kavats we breed from their genetic material don&rsquo;t have scales, but one can use a <em>gene-masking kit</em> to bring that back, implying it&rsquo;s still there. It&rsquo;s plausible that the feral kavat genetics have been permanently altered by the Infestation, and our incubator alters their genome to replicate the non-Infested appearance&hellip; but only just.</p>

<p>My headcanon is that our kavats retain many Infested alterations in both the genotype and the phenotype. Think back on how much damage your kavat has taken over the course of your missions. No normal animal would be able to survive that many wounds. At best, it would have been horribly maimed and out of commission. Also, how exactly do we install Orokin Reactors and mods in them? It logically follows that their incubation involves a degree of modification using the Helminth, giving them the same properties of durability, regeneration, and mod compatibility as our warframes.</p>

<p>Oh and consider the astronomical 120k Alloy Plate spent on the Incubator kavat module. Where exactly did that Alloy Plate go? Perhaps it&rsquo;s being used to reinforce the kavats.</p>
<h2 id="vauban"><span class="heading-prefix" aria-hidden="true"></span>Vauban is some Corpus guy pretending to be a warframe<a href="#vauban" class="heading-anchor" aria-hidden="true"></a></h2>
<div class="img-box"><a class="img-box-padder" style="padding-top: calc(320/320*100%)" href="https://warframe.fandom.com/wiki/Vauban/Prime" target="_blank" rel="noopener noreferrer"><img src="/images/warframe/vauban_prime.png" alt="Vauban Prime" class="img-box-img"></a><span class="img-box-caption" aria-hidden="true">Vauban Prime</span></div>

<p>Every Vauban ability involves deploying small gear such as grenades. In contrast, most warframe abilities involve conjuring things out of nothing; think Ember, Frost, Nova, Saryn, and more. Some do have integrated gear, such as exalted weapons and Protea&rsquo;s deployables. However, Vauban&rsquo;s 100% reliance on deployables should raise suspicion. If Corpus were to create a warframe-alike, this is <em>exactly</em> how it would function!</p>

<p>Building Vauban Prime parts requires ludicrous amounts of materials compared to other frames. It&rsquo;s expensive and luxurious, it flaunts wealth, prosperity, and profit. Reinforced by its Codex entry:</p>
<blockquote class="blockquote">
<p>&ldquo;Lust was my sin. But greed is the blight that weakens our steel. These industrialists have gorged on the harvest of our long war. Their mind drones; Their mechanizations, toil in foundries remote. For what purpose? We must set watch upon them. Baiting our snares with the worms of profit.</p>

<p>Those kneeling at the altar of commerce will be returned.. to the Void.</p>

<p>For your consideration&hellip; Vauban.&rdquo;</p>

<footer>Ballas</footer>
</blockquote>
<p>So, what if rather than being a warframe, Vauban combines armor and various weapon systems to allow a regular human to act like one, living out the fantasy? &ldquo;Hey look guys, I&rsquo;m totally a warframe!&rdquo;</p>

<p>A friend suggested that perhaps Vauban is made so expensive in order to bankrupt the Corpus who&rsquo;re baited to manufacture it. (See the Codex entry above.) Alternatively, it&rsquo;s the cost of continuously manufacturing the expendable supplies, unnecessary for most warframes.</p>
<h2 id="tenno-peaceframes"><span class="heading-prefix" aria-hidden="true"></span>Human-looking Tenno associates are &ldquo;peaceframes&rdquo;<a href="#tenno-peaceframes" class="heading-anchor" aria-hidden="true"></a></h2>
<p>Relays have many human-looking Tenno or Tenno associates. They can be relay staff, syndicate members, and Tenno rescue targets which Lotus specifically calls &ldquo;Tenno operatives&rdquo;. More importantly, they&rsquo;re found in something labeled &ldquo;warframe cryopods&rdquo;.</p>

<p>The most literal interpretation is that these guys are fully-fledged Tenno, using warframes specifically designed for civil life. Those &ldquo;peaceframes&rdquo; appear human, but who knows what&rsquo;s under that visor and body-tight suit? Since they&rsquo;re found in cryopods, it follows that some Tenno wake up in peaceframes rather than warframes like Excalibur. Those guys went on to build relays, research technologies, and provide support to the combat Tenno.</p>

<p>If these guys are remote-controlled like regular warframes, their operators might still be sleeping through the Second Dream. They might even believe themselves to be human!</p>
<h2 id="operator-peaceframes"><span class="heading-prefix" aria-hidden="true"></span>Hypothesis: operators are &ldquo;peaceframes&rdquo;<a href="#operator-peaceframes" class="heading-anchor" aria-hidden="true"></a></h2>
<div class="img-box"><div class="img-box-padder" style="padding-top: calc(680/680*100%)"><img src="/images/warframe/somatic_link.jpg" alt="Somatic Link" class="img-box-img"></div><span class="img-box-caption" aria-hidden="true">Somatic Link</span></div>

<p>See the above on Tenno associates and peaceframes. If operators were also peaceframes, this would explain a lot!</p>

<ul>
<li>Halted aging.</li>
<li>Ability to modify appearance, voice, apparent gender.</li>
<li>Ability to survive in vacuum, as seen in the infested Corpus ship tileset.</li>
<li>Apparent lack of human support facilities on the Orbiter.</li>
<li>Apparent ability to sit awake in the transference chair for indefinite periods of time, without any regular human needs.</li>
</ul>

<p>In the Second Dream we supposedly awaken as the &ldquo;real&rdquo; puppeteer behind the golem. It&rsquo;s not unreasonable to suggest that there&rsquo;s another body <em>behind</em> the Operator, for real this time. But let&rsquo;s keep it simple and suppose the Operator is the &ldquo;final&rdquo; body. How could it be a peaceframe?</p>

<p>Option 1: fusion. Chains of Harrow establishes that a Tenno can fuse with a warframe, transferring from the original human body. Perhaps every Tenno transfered to a specially prepared, younger-looking peaceframe.</p>

<p>Option 2: Helminth. Just like Excalibur Umbra, the Tenno may have been infested with the Helminth to become frame-like. Warframes are known to lose their sanity in the process, but for the Tenno we can handwave it through Void magicks.</p>

<p>Our Operator never makes any statements contradicting any of this, but even if they did, their memory can&rsquo;t be trusted anyway!</p>
<h2 id="tenno-digital"><span class="heading-prefix" aria-hidden="true"></span>Hypothesis: Tenno are digital minds (busted)<a href="#tenno-digital" class="heading-anchor" aria-hidden="true"></a></h2>
<div class="img-box"><a class="img-box-padder" style="padding-top: calc(256/256*100%)" href="https://warframe.fandom.com/wiki/Cephalon" target="_blank" rel="noopener noreferrer"><img src="/images/warframe/ordis.png" alt="Cephalon" class="img-box-img"></a><span class="img-box-caption" aria-hidden="true">Cephalon</span></div>

<p>This was my original headcanon about Tenno before playing the Second Dream.</p>

<p>The Tenno are digital minds, which allows them to body-surf between warframes. Let&rsquo;s assume they&rsquo;re run locally inside warframes, because this has far more interesting implications compared to remote control.</p>

<p>The Orbiter maintains the &ldquo;master copy&rdquo; of the Tenno personality data. Each warframe has a computing core capable of running the Tenno mind, but only one is allowed to run at a time. The active warframe continuously uploads new memories to the Orbiter. Upon critical damage, the core self-erases and breaks the uplink; the Orbiter boots up a spare warframe with the latest copy of the Tenno mind. The illusion of &ldquo;self&rdquo; is maintained by the continuity of memories.</p>

<p>Warframes lost during missions are looted by the Corpus or Grineer for experiments such as Zanuka. If the core was successfully erased, they get just the hardware. But if something went wrong and the enemy manages to preserve and boot up the core, Valkyr&rsquo;s origin story suddenly makes sense.</p>

<p>This more or less gets busted by the Second Dream. See <a href="#operator-peaceframes"><span class="hash-prefix noprint" aria-hidden="true">#</span>operator peaceframes</a> for an alternate interpretation.</p>
<h2 id="tenno-children"><span class="heading-prefix" aria-hidden="true"></span>Hypotheses about the Zariman children<a href="#tenno-children" class="heading-anchor" aria-hidden="true"></a></h2>
<div class="img-box"><a class="img-box-padder" style="padding-top: calc(640/640*100%)" href="https://warframe.fandom.com/wiki/Zariman_Ten_Zero" target="_blank" rel="noopener noreferrer"><img src="/images/warframe/vitruvian_zariman.jpg" alt="Zariman in the Vitruvian" class="img-box-img"></a><span class="img-box-caption" aria-hidden="true">Zariman in the Vitruvian</span></div>

<p><strong>Basis</strong>. Ember&rsquo;s Codex entry: &ldquo;Why would you put children on a military ship? — We didn&rsquo;t.&rdquo;</p>

<p>Let&rsquo;s run with this!</p>
<h3 id="hypothesis-void-temporal-anomaly-resulting-in-long-journey"><span class="heading-prefix" aria-hidden="true"></span>Hypothesis: Void temporal anomaly resulting in long journey<a href="#hypothesis-void-temporal-anomaly-resulting-in-long-journey" class="heading-anchor" aria-hidden="true"></a></h3>
<p>It&rsquo;s canon that spaceships travel through the Void, and the Void can cause temporal anomalies. What if the Zariman&rsquo;s journey lasted for one or several generations in onboard clock?</p>

<p>The Zariman being headed for Tau (see next hypothesis) implies it was a colony ship, likely with a lot of surplus space, supplies, and a large genetically diverse population inclined to breed. If the journey was taking decades, they would start having children out of boredom or to ensure the mission continues if the original crew dies of old age. Note that &ldquo;military ship&rdquo; doesn&rsquo;t mean &ldquo;not colony ship&rdquo;: the Orokin empire was highly militarized, and if they were going to wage war, they&rsquo;d send a fleet.</p>

<p>Various Codex entries, as well as remembrances in the War Within and Chains of Harrow, imply that the Tenno were a relatively tight group of similar age, which makes them more likely to be generation 1 rather than N, because breeding times would diverge over multiple generations.</p>

<p>Getting stuck in the Void for one or several decades, with no apparent way out, could demoralize the crew to the point of madness. The synchronized craze doesn&rsquo;t need any special explanation other than mob effects. If the journey lasted for generations, educational and cultural decay could lead to mad suicidal cults. Note that the ship&rsquo;s systems could be run by a Cephalon, which tend to remain stable over hundreds of years; the crew could have lost any ability to operate the ship, kept alive by its digitized butler.</p>

<p>This doesn&rsquo;t invoke any unnecessary magic, and neatly explains why the Orokin hushed down the story: the risk of ships getting lost due to Void anomalies could demoralize the servant populations, even if such occurrences were rare.</p>
<h3 id="hypothesis-the-zariman-did-reach-tau"><span class="heading-prefix" aria-hidden="true"></span>Hypothesis: the Zariman did reach Tau<a href="#hypothesis-the-zariman-did-reach-tau" class="heading-anchor" aria-hidden="true"></a></h3>
<p>One of the ingame materials mentions that the Zariman was headed for Tau, possibly to oversee the Sentients&rsquo; terraforming efforts and start the human colonization. There are no indications of whether the ship got lost before or after reaching the destination. So let&rsquo;s suppose they did.</p>

<p>Could the crew&rsquo;s craze have something to do with the Sentients? Maybe what they saw on the arrival was so terrifying, so devastating, that they chose to end themselves? Or perhaps the Sentients deployed some kind of psychic weapon?</p>
<h3 id="hypothesis-adults-turned-into-children"><span class="heading-prefix" aria-hidden="true"></span>Hypothesis: adults turned into children<a href="#hypothesis-adults-turned-into-children" class="heading-anchor" aria-hidden="true"></a></h3>
<p>The Operator seems to have memories of parents on the Zariman, and of killing the ship&rsquo;s adults. But the Operator&rsquo;s memory is untrustworthy; it&rsquo;s been tampered with, has massive omissions, and what&rsquo;s there is extremely vague. It&rsquo;s remotely plausible that the Void reversed their age and messed with their heads, causing them to form false memories.</p>

<p>One possibility is that the entire Zariman crew got turned into children, forming fake memories of the massacre.</p>

<p>Alternatively, one part of the crew became children, while the rest stayed as adults and took care of them. Eventually, either:</p>

<ul>
<li>The adults went berserk and the children slaughtered them.</li>
<li>The <em>children</em> went berserk and slaughtered the adults, forming fake memories of the <em>opposite</em>.</li>
</ul>
<h3 id="hypothesis-the-void-made-them"><span class="heading-prefix" aria-hidden="true"></span>Hypothesis: the Void made them<a href="#hypothesis-the-void-made-them" class="heading-anchor" aria-hidden="true"></a></h3>
<p>Perhaps everything was according to procedure. The Zariman&rsquo;s crew consisted of only human adults, they didn&rsquo;t reproduce, didn&rsquo;t reverse-age. Instead, creatures indistinguishable from human children appeared out of the Void, and the rest is history.</p>
<h2 id="void-entity"><span class="heading-prefix" aria-hidden="true"></span>Void entity hypotheses<a href="#void-entity" class="heading-anchor" aria-hidden="true"></a></h2>
<div class="img-box"><a class="img-box-padder" style="padding-top: calc(260/320*100%)" href="https://warframe.fandom.com/wiki/The_Man_in_The_Wall" target="_blank" rel="noopener noreferrer"><img src="/images/warframe/wall_hand.jpg" alt="Reaching out" class="img-box-img"></a><span class="img-box-caption" aria-hidden="true">Reaching out</span></div>

<p>&ldquo;Void entity&rdquo; refers to any of:</p>

<ul>
<li>Operator doppelganger that shows up after Chains of Harrow. It appears in the Orbiter and Railjack.</li>
<li>Albrecht&rsquo;s doppelganger documented in his memoirs, supposedly seen in one of the expeditions to the Void.</li>
<li>Rell&rsquo;s &ldquo;Man in the wall&rdquo;.</li>
</ul>
<h3 id="void-entity-manmade"><span class="heading-prefix" aria-hidden="true"></span>The Void entity is manmade<a href="#void-entity-manmade" class="heading-anchor" aria-hidden="true"></a></h3>
<p>Chains of Harrow establishes that the Void has an entity associated with it, possessing a human-like mind and personality. This entity seems particularly interested in Tenno operators, visiting their Orbiters and Railjacks to say hello and remind how we &ldquo;owe&rdquo; it.</p>

<p>Intuitively, a force of nature permeating the entire universe wouldn&rsquo;t have an mind of its own, particularly not something as small-scale and specific as a human. It logically follows that it originated from humanity.</p>

<p>Perhaps humanity&rsquo;s existence influences the Void, forming an entity or multiple entities that reflect it. Perhaps this is humanity&rsquo;s gestalt. Alternatively, it could be a specific human, similar to the operators but much more &ldquo;ascended&rdquo;.</p>

<p>This has obvious parallels with some other franchises; I&rsquo;ll let you invoke them yourself.</p>
<h3 id="mitw-rell"><span class="heading-prefix" aria-hidden="true"></span>Man-in-the-wall vs. Rell<a href="#mitw-rell" class="heading-anchor" aria-hidden="true"></a></h3>
<p>After completing Chains of Harrow and &ldquo;freeing&rdquo; Rell, an unidentified entity, seemingly Void-associated, begins visiting the operators. Palatino and Rell make claims about some &ldquo;man-in-the-wall&rdquo; in the Void, which may or nay be the same entity. They claim that Rell was keeping MITW away from the other Tenno. However, MITW and Rell were never seen in the same room together. Further, we know that Rell has the propensity to haunt people when emotionally destabilized, as he did when spurring his Red Veil devoted into murder sprees.</p>

<p>One logical conclusion is that Rell, MITW, and our mysterious visitor are one and the same. We &ldquo;freed&rdquo; Rell, now he haunts us. One solid counter-argument is that Rell&rsquo;s autistic personality drastically differs from the visitor&rsquo;s extravagant, gallivanting demeanor. This could be explained by a split personality, where only one half is autistic; a stretch, but not implausible, especially considering Rell no longer has a bio-brain.</p>

<p>Alternatively, we might take their claims at face value. We &ldquo;freed&rdquo; Rell, now something other than Rell haunts us. It logically follows that Rell had its attention, and now we&rsquo;ve attracted its attention.</p>
<h2 id="stalker"><span class="heading-prefix" aria-hidden="true"></span>Stalker hypotheses<a href="#stalker" class="heading-anchor" aria-hidden="true"></a></h2>
<div class="img-box"><a class="img-box-padder" style="padding-top: calc(320/320*100%)" href="https://warframe.fandom.com/wiki/Stalker" target="_blank" rel="noopener noreferrer"><img src="/images/warframe/stalker.png" alt="Stalker" class="img-box-img"></a><span class="img-box-caption" aria-hidden="true">Stalker</span></div>

<p>Known Stalker canon:</p>

<ul>
<li>Survived since the Orokin times.</li>
<li>Bitter at Tenno for destroying the Orokin society.</li>
<li>Low-tech weapons, ninja/samurai aesthetic. Apparent product of the Dax/Tenno culture, of the war with the Sentients.</li>
<li>No indication of having Void powers. Retreats to a<strong>void</strong> death. Can teleport and dispel Tenno powers, but so can some Grineer and Corpus units.</li>
<li>Understands some Orokin tech, able to make Void Keys.</li>
<li>Supposedly didn&rsquo;t know the nature of Tenno.</li>
<li>Attitude towards Tenno is akin to severe teacher punishing his pupils. Attacks warframes but avoids killing the Operator in the Second Dream. May have lied to Hunhow about being ignorant of Tenno/warframe duality.</li>
</ul>
<h3 id="stalker-tenno-woke"><span class="heading-prefix" aria-hidden="true"></span>Hypothesis: Stalker is a renegade Tenno that woke up from the Dream and doesn&rsquo;t use a warframe<a href="#stalker-tenno-woke" class="heading-anchor" aria-hidden="true"></a></h3>
<p><strong>Basis</strong>. Lotus: &ldquo;I was trying to protect you from the truth (about the reservoir). This truth drove Stalker mad.&rdquo;</p>
<h3 id="stalker-tenno-dreaming"><span class="heading-prefix" aria-hidden="true"></span>Hypothesis: Stalker is a renegade Tenno that&rsquo;s still in the Dream<a href="#stalker-tenno-dreaming" class="heading-anchor" aria-hidden="true"></a></h3>
<p><strong>Basis</strong>. Hunhow to Stalker: &ldquo;Do you still hate these abominations? Do you hate&hellip; yourself?&rdquo;</p>

<p>Counter-argument: Lotus is likely to keep tabs on all Tenno in the Reservoir. She would have known about Stalker and would have taken measures to disable him.</p>
<h3 id="stalker-warframe"><span class="heading-prefix" aria-hidden="true"></span>Hypothesis: Stalker is a warframe that regained its mind, possibly a former Dax<a href="#stalker-warframe" class="heading-anchor" aria-hidden="true"></a></h3>
<p><strong>Basis</strong>. Hunhow to Stalker: &ldquo;Are you asking yourself: was I one of those wretched things?&rdquo;</p>
<h3 id="stalker-human"><span class="heading-prefix" aria-hidden="true"></span>Hypothesis: Stalker is a normal human wearing armor made of warframes, possibly Dax or Orokin<a href="#stalker-human" class="heading-anchor" aria-hidden="true"></a></h3>
<p>Perhaps the most &ldquo;normal&rdquo; explanation listed here.</p>
<h2 id="orokin-creation"><span class="heading-prefix" aria-hidden="true"></span>The Orokin are made this way rather than born<a href="#orokin-creation" class="heading-anchor" aria-hidden="true"></a></h2>
<p>In The War Within, the Operator recalls some Orokin looking for beautiful young bodies to transfer into, via the Continuity process. Ordis&rsquo; memories in the Codex contain a scene where the Orokin offer him to become one of them, implying a process involving Kuva.</p>
<h2 id="orokin"><span class="heading-prefix" aria-hidden="true"></span>The Orokin society is still around, in the Void and/or other solar systems<a href="#orokin" class="heading-anchor" aria-hidden="true"></a></h2>
<p>There&rsquo;s no particular reason to think that the Tenno exterminated <em>all</em> Orokin. The extermination couldn&rsquo;t have been instant. The Empire was vast, and the Tenno were a relatively small elite force. While the Tenno managed to collapse the core of the Empire, it seems likely that large groups of the Orokin would have escaped by hiding in the Void or other solar systems. After all, the name &ldquo;Origin System&rdquo; implies that other systems have been settled.</p>

<p>It&rsquo;s very plausible that there are vibrant Orokin societies out there.</p>
<h2 id="baro-orokin-market"><span class="heading-prefix" aria-hidden="true"></span>Baro gets his stuff in the Orokin market<a href="#baro-orokin-market" class="heading-anchor" aria-hidden="true"></a></h2>
<p>See <a href="#orokin"><span class="hash-prefix noprint" aria-hidden="true">#</span>above</a> on the Orokin society. Why does Baro trade in Orokin Ducats? Because he trades with the Orokin! His &ldquo;dangerous Void safari&rdquo; are probably just trips to the discount Sunday market next door.</p>

<p>It&rsquo;s no wonder he looks down on non-prime things. Being in the same solar system as non-prime frames and primitive cultures such as the Corpus must be an emotionally traumatic experience for someone attuned to the Orokin bling.</p>

<p>Why does he also trade in Corpus credits? He must be doing business on both sides. He doesn&rsquo;t just sell primes. Some wares are upgraded versions of &ldquo;modern&rdquo; weapons or decorations. Some are decorations of the particular Ki&rsquo;Teer brand. He probably builds them in the Origin System where it&rsquo;s cheaper, possibly renting workforce and manufacturing plants from the Corpus. Take particular note of the Ki&rsquo;Teer Domestik Drones; they&rsquo;re basically rebranded Corpus Domestik Drones with a specially-decorated hull. The main difference is spying on you for Baro instead of for Corpus.</p>
<h2 id="tenno-and-sentients"><span class="heading-prefix" aria-hidden="true"></span>Hypothesis: Tenno teamed up with Sentients to crush the Orokin<a href="#tenno-and-sentients" class="heading-anchor" aria-hidden="true"></a></h2>
<p><strong>Basis</strong>. The Second Dream, Alad V to Tenno (paraphrasing): &ldquo;The last time you got close with the Sentients, you destroyed an entire civilization. But you don&rsquo;t remember that, do you?&rdquo;</p>
<h2 id="derelict-capture"><span class="heading-prefix" aria-hidden="true"></span>Derelict capture targets are survivors of Tenno raids<a href="#derelict-capture" class="heading-anchor" aria-hidden="true"></a></h2>
<p>The capture targets on the Infested Derelict will scream &ldquo;I don&rsquo;t want to die!&rdquo; and &ldquo;No, not you, not you, not you!..&rdquo;. (All capture targets do, but hear me out.) Some are elites, equipped with a ridiculously powerful Glaxion that can melt anyone in seconds. These guys must be veterans, survivors of Tenno raids on Corpus ships, who requested assignment to the most remote, most dangerous place, in hopes that Tenno won&rsquo;t show up&hellip; <em>and then they show up</em>.</p>
<h2 id="cy"><span class="heading-prefix" aria-hidden="true"></span>Cephalon Cy is corrhupted by Sentients<a href="#cy" class="heading-anchor" aria-hidden="true"></a></h2>
<p>Cy has memories of wiping out his ship&rsquo;s crew &ldquo;to complete the mission&rdquo; and seems extremely confused about what exactly constituted the mission and why it suddenly required killing the crew.</p>

<p>Obvious logical explanation: the mission was against Sentients; they hacked the Cephalon and overwrote the mission objective with &ldquo;ensure death of crew by disabling ship systems while blaming enemies&rdquo;. Octavia&rsquo;s quest, dumb as it is, establishes that Sentients can remotely corrupt Cephalons.</p>

<p>Various indications that Cy is either still corrupted or intellectually impeded in some way:</p>

<ul>
<li>Railjack build quality. Cy appears to have complete RJ blueprints. Instead of building one from scratch, he requires us to scavenge wreckage that&rsquo;s been rotting in the ground for several hundred years. Unsurprisingly, RJ feels paper-thin, easily punctured by ramsleds or regular stray shots. Perhaps Cy did this to create tension and feel useful, like a ship&rsquo;s captain barking orders to repair this, repair that, repel intruders, repair onboard hazards, and so on. A well-built RJ would make missions too smooth, and who wants that? Certainly not a viable command Cephalon!</li>
<li>Prematurely ending Sentient exterminations. Upon reaching 20 Sentient kills aboard a Murex, Cy immediately declares &ldquo;No further Sentient reinforcements are incoming. Mission complete.&rdquo; as the remaining Tau freaks are trying to melt your face and spawning pools are preparing the next generation of Brachiolysts. As if he&rsquo;s trying to stop us from <em>truly</em> sterilizing the Murex.</li>
</ul>
<h2 id="kuva-liches-imprisoned"><span class="heading-prefix" aria-hidden="true"></span>Converted Kuva Liches get caught and imprisoned in Kuva Fortress<a href="#kuva-liches-imprisoned" class="heading-anchor" aria-hidden="true"></a></h2>
<p>This one is rooted in a particular personal experience. At some point I ran a rescue mission in the Kuva Fortress. Upon opening the first prison cell, smack in the middle of the cell, I found one of my converted Kuva Liches, asking me &ldquo;Are you trying to get yourself killed?&rdquo;. Technically, this triggered because I died once on the way to the prison, but the timing and positioning of the spawn was impeccable.</p>

<p>Converted Liches need maintenance for their flesh and cybernetics. Being Tenno-aligned outcasts, they can&rsquo;t exactly turn to their brethren for help. They might be making deals with Steel Meridian, like running missions for them in exchange for materials. But alternatively, they might willingly get captured, get free maintenance, and then we bust them out!</p>
<h2 id="grineer-alarms"><span class="heading-prefix" aria-hidden="true"></span>Grineer get special alarm training<a href="#grineer-alarms" class="heading-anchor" aria-hidden="true"></a></h2>
<p>Ever notice how they bumrush to trigger alarms? Even while the alarms are <em>already buzzing</em>, enemies will rush to trigger more! Even better if it triggers a lockdown! Even on mission types where alarms are disabled (Capture missions), they <em>gotta mash that button</em>.</p>

<p>The headcanon is that Grineer undergo a special course in alarms. Can&rsquo;t rely on own strength? There&rsquo;s always backup! Some Grineer take an elective in Corpus tech, just to use alarms on the Corpus ships they raid.</p>
<h2 id="bigger-inside"><span class="heading-prefix" aria-hidden="true"></span>Most ships and space stations are bigger on the inside<a href="#bigger-inside" class="heading-anchor" aria-hidden="true"></a></h2>
<p>This got retconned at some point, but the Orbiter used to be called &ldquo;landing craft&rdquo;, and prior to that, simply &ldquo;Liset&rdquo;. Your landing craft is clearly smaller on the outside than the inside of your ship. Now that the Orbiter is supposed to be a separate ship, we don&rsquo;t need this explanation, but the Railjack brings it back. Hop around your Railjack in a dojo; the outside is clearly smaller.</p>

<p>This isn&rsquo;t limited to our ships. During any Railjack mission, deploy into archwing and fly around <em>any</em> ship or space station. Most of them are much smaller on the outside. This includes Railjack, Grineer Crewships, possibly Grineer space stations, boardable Orokin Towers, Murexes. Grineer Galleons might be an exception.</p>
<h2 id="railjack-skins"><span class="heading-prefix" aria-hidden="true"></span>Railjack skins are external holographic projections<a href="#railjack-skins" class="heading-anchor" aria-hidden="true"></a></h2>
<p>The Sungem skin modifies the craft so much that you&rsquo;d expect the interior to change, but it doesn&rsquo;t. Furthermore, Railjack skins sometimes work and sometimes don&rsquo;t. For example, when looking at the RJ from inside the Orbiter, it uses the default skin. One natural conclusion is that the skin is a holo-projection which doesn&rsquo;t affect the interior and is not always turned on.</p>
<h2 id="lotus-multitask"><span class="heading-prefix" aria-hidden="true"></span>Lotus supervises all Tenno operations personally and simultaneously<a href="#lotus-multitask" class="heading-anchor" aria-hidden="true"></a></h2>
<p>The Lotus&rsquo; involvement in your missions is too personal, too low-level for a commander of an entire faction. Even before Natah / The Second Dream / The War Within, I assumed that Lotus is a machine, an AI powerful enough to simultaneously oversee all Tenno missions at once. While the canon doesn&rsquo;t explicitly confirm the &ldquo;all at once&rdquo; part, the &ldquo;machine mind&rdquo; part is conveniently confirmed.</p>
<h2 id="quills-eidolon-lures"><span class="heading-prefix" aria-hidden="true"></span>Quills came up with Eidolon Lures<a href="#quills-eidolon-lures" class="heading-anchor" aria-hidden="true"></a></h2>
<p>Eidolon lures are able to consume Vomvalysts and weaken the big eidolons. This kind of tech seems a bit too advanced for the Grineer. It seems a bit&hellip; convenient that it only exists on Plains, where the Quills operate.</p>
<h2 id="murmurs"><span class="heading-prefix" aria-hidden="true"></span>Kuva Lich murmurs represent tapping into Grineer transmissions and listening to rumors<a href="#murmurs" class="heading-anchor" aria-hidden="true"></a></h2>
<p>Pretty much what the name &ldquo;murmur&rdquo; implies. We already have access to Grineer comms, you can listen to them in your Orbiter, but filtering the information relevant to your particular Lich could be difficult. Thralls act as a lead, letting us find the relevant comms that reveal useful details about the Lich.</p>
<h2 id="warframes-autonomous"><span class="heading-prefix" aria-hidden="true"></span>Many warframes acted autonomously for long periods of time<a href="#warframes-autonomous" class="heading-anchor" aria-hidden="true"></a></h2>
<p><strong>Basis</strong>: the legends of Gara, Protea, Inaros; the Sacrifice (quest).</p>

<p>In each of these legends:</p>

<ul>
<li>The action happens while the Tenno should be in stasis; nobody&rsquo;s around to drive the warframe.</li>
<li>The warframe is personalized, a character rather than a mass-produced golem.</li>
</ul>

<p>It&rsquo;s plausible that among the warframes made from humans using the Helminth process, some had regained their minds, or never completely lost them in the first place. When the Tenno went into stasis, they stuck around. Gara was spending time with Unum, Inaros was tracking down the remaining Orokin survivors and finishing the Tenno&rsquo;s work, Protea was with Parvos in the Granum Void, and so on.</p>
<h2 id="hostages"><span class="heading-prefix" aria-hidden="true"></span>Hostages get recaptured all the time because we leave them behind<a href="#hostages" class="heading-anchor" aria-hidden="true"></a></h2>
<p>At the end of Rescue missions, we rush to the landing craft and fly away, as the hostage just stands there in the extraction zone. If we really wanted to extract them, we&rsquo;d put them in a pokeball, like Capture targets. Of course they get recaptured. That&rsquo;s why you can rerun the mission!</p>
<h2 id="teshin-kuva"><span class="heading-prefix" aria-hidden="true"></span>Teshin can command himself by using the Kuva Scepter<a href="#teshin-kuva" class="heading-anchor" aria-hidden="true"></a></h2>
<p>Like any Dax, Teshin is hardwired to obey anyone who wields the Kuva Scepter. So, what happens if the Dax themselves wields it? By now, Teshin could put together a perfectly-functional Kuva Scepter. Run a few Synthesis missions, get Simaris standing, buy the Broken Scepter blueprint. Grab some Kuva from his endless stash (see Steel Path rewards), stick it on the Broken Scepter, get a full Kuva Scepter.</p>

<p>Wielding the Scepter should give Teshin the perk &ldquo;Iron Will&rdquo;, a perfect self-geas, a self-command you can&rsquo;t refuse.</p>
<h2 id="inaros-makeup"><span class="heading-prefix" aria-hidden="true"></span>Inaros is made of nanobots<a href="#inaros-makeup" class="heading-anchor" aria-hidden="true"></a></h2>
<p>Inaros&rsquo; sand theme doesn&rsquo;t make much sense among high-tech war machines made of living metal. Its visual appearance also doesn&rsquo;t convey particularly high durability; the deluxe skin improves on that, but doesn&rsquo;t look particularly tougher than, say, Chroma or deluxe Frost.</p>

<p>But what if Inaros is made of fast-moving, fast-replicating nano- or micro-bots? This simultaneously explains the high health pool (no vulnerable organs) and the ease of transfering that health around.</p>
<h2 id="orokin-drones-are-indoctrination-devices"><span class="heading-prefix" aria-hidden="true"></span>Orokin Drones are indoctrination devices<a href="#orokin-drones-are-indoctrination-devices" class="heading-anchor" aria-hidden="true"></a></h2>
<div class="img-box"><a class="img-box-padder" style="padding-top: calc(256/256*100%)" href="https://warframe.fandom.com/wiki/Orokin_Drone" target="_blank" rel="noopener noreferrer"><img src="/images/warframe/orokin_drone.png" alt="Orokin Drone" class="img-box-img"></a><span class="img-box-caption" aria-hidden="true">Orokin Drone</span></div>

<p>In the Corrupted faction, all units are named &ldquo;Corrupted X&rdquo;, except for these drones. Now consider, how exactly does an Orokin Tower&rsquo;s &ldquo;neural sentry&rdquo;, likely a Cephalon, maintain the towers? How does it corrupt those who visit its domain? How does it maintain the state of corruption?</p>

<p>It must have tools, mobile drones acting as its eyes and arms. It must have indoctrination devices, numerous and mobile. When deploying squads of Corrupted into remote areas, those eyes, arms, and indoctrination devices must be deployed with them to relay the combat situation, orders, and ensure continuous loyalty. It stands to reason that these drones are responsible for it.</p>
</article>]]></content>
    <published>2020-10-10T12:25:32Z</published>
    <updated>2020-10-10T12:25:32Z</updated>
    <link rel="alternate" href="https://mitranim.com/posts/warframe-headcanon"></link>
    <summary type="html"><![CDATA[Collection of Warframe headcanon co-authored with friends.]]></summary>
    <author>
      <name>Nelo Mitranim</name>
      <email>me@mitranim.com</email>
    </author>
  </entry>
  <entry xml:base="https://mitranim.com/posts/thoughts-on-the-egg">
    <title>Thoughts on The Egg: a short story by Andy Weir, animated by Kurzgesagt</title>
    <id>https://mitranim.com/posts/thoughts-on-the-egg</id>
    <content type="html"><![CDATA[<article role="main article" class="fan-typo"><iframe width="560" height="315" src="https://www.youtube.com/embed/h6fcK_fRYaI" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p><a href="http://www.galactanet.com/oneoff/theegg_mod.html" target="_blank" rel="noopener noreferrer">Text link<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a></p>

<p><a href="https://www.youtube.com/watch?v=h6fcK_fRYaI" target="_blank" rel="noopener noreferrer">Youtube link<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a></p>

<p>I like the story. It seems to place value on growth and maturity. It implies that power should be wielded by responsible grown-ups, and seems to associate maturity with kindness. (Thought we can debate the kindness of a world full of suffering.) It plants the idea that we should be kinder, just in case something like this is true.</p>

<p>If this was the basis of a worldwide religion, the world would have been a much better place by now. Religions that promote reincarnation lack this one crucial piece that would fall into place like it&rsquo;s meant to be there. We missed a great opportunity thousands or hundreds of years ago. But it might not be too late; the world might be more receptive than it ever has been.</p>

<p>I immediately imagine a radical offshoot of such a religion. Looking at the state of the world, they interpret the god&rsquo;s idea of &ldquo;growth&rdquo; as &ldquo;suffering&rdquo; and make it their mission to spread as much misery and suffering as possible. Excluding their higher-ups, of course.</p>

<p>Let&rsquo;s indulge ourselves in thinking about the outcome. In such a scenario, everyone eventually merges into a single mind that combines all minds that have ever lived. Human, sub-human, super-human, alien, uplifted animal species, uploaded minds, AI, and more. When does this happen? The &ldquo;god&rdquo; has built a kill switch into the bio-species, but this can be overcome with technology. To get around that, it would also build a kill switch into the universe itself; let&rsquo;s say a <a href="https://en.wikipedia.org/wiki/Big_rip" target="_blank" rel="noopener noreferrer">Big Rip<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a> or a <a href="https://en.wikipedia.org/wiki/Big_crunch" target="_blank" rel="noopener noreferrer">Big Crunch<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a>. This would conclude the incubation.</p>

<p>The idea of a single unified mind is intriguing. On the <a href="https://hplusmagazine.com/2011/09/27/future-shock-levels/" target="_blank" rel="noopener noreferrer">Future Shock<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a> scale, it probably places at level 4. Most people would be uncomfortable with such a future for themselves (unless, conveniently, it was planted by a religion they held since childhood). But consider this:</p>

<ul>
<li>Humanity is arguably a single lifeform consisting of tiny individuals.</li>
<li>Humanity is arguably a networked super-intelligence.</li>
</ul>

<p>&ldquo;Networked super-intelligence&rdquo; refers to a type of intelligence that consists of individually intelligent parts that exchange information. In contrast, a non-networked super-intelligence consists only of &ldquo;dumb&rdquo; parts. The idea of unifying into a single mind may scare us with loss of individuality. But what is individuality but not a limitation, a border? How come I is I, and you is you? How can there be more than one ego, more than one point of view? Isn&rsquo;t it bizarre? Doesn&rsquo;t it seem kind of artificial?</p>

<p>We&rsquo;ve been doing all we can to bridge this gap by inventing ways to exchange information. Body language, verbal language, rituals, drawing, music, writing, poetry, book printing, radio, TV, the internet. We seem to be moving towards some middleground between pure isolation and deep networking. What&rsquo;s that middleground? Does it stop at verbal exchange? Does it involve a technological telepathy that allows to share deeper thoughts and emotions? Does it go further and allow complete exchange and on-the-fly synchronization of entire persons, merging two, or more, into one? Imagine the ability to link into one, then unlink and diverge, then sync back again. When linked, do they count as two intelligences, or just one?</p>

<p>We have an interesting precedent and precursor: the two hemispheres inside each human skull. Each hemisphere is capable of running an entire human person. Compare <a href="https://en.wikipedia.org/wiki/Split-brain" target="_blank" rel="noopener noreferrer">split-brain syndrome<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a> caused by severing the connection vs. <a href="https://en.wikipedia.org/wiki/Hemimegalencephaly" target="_blank" rel="noopener noreferrer">having one functional hemisphere<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a> and/or <a href="https://en.wikipedia.org/wiki/Hemispherectomy" target="_blank" rel="noopener noreferrer">having the other hemisphere removed<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a>. In successful cases of the latter, one hemisphere <em>does</em> in fact run the entire person. In the case of split-brain, each hemisphere more or less runs a <em>different</em> person. In a healthy brain, the connection between the &ldquo;brains&rdquo; maintains an <em>illusion</em> of a sole ego.</p>

<p>An ideal mind-link technology would have controls for privacy and degrees of data sync. It should be possible to choose what to share and how deeply. Different individuals, pairs, groups, would link to different degrees. In the limit case, it would merge them completely for the duration of the connection. Become one, then many, then one again.</p>

<p>The ideas of &ldquo;unified mind&rdquo; and &ldquo;networked super-intelligence&rdquo; can be seen as special cases of this mind-link, varying only in degrees. More interestingly, there&rsquo;s no reason for the linking to be permanent. It could be on for work, for voting on important matters, then off for leisure, or some other variation. Such a civilization would be like us today: a networked super-intelligence, but with a higher degree of efficiency. Personally, I&rsquo;d be excited. What about you?</p>
</article>]]></content>
    <published>2020-04-30T08:25:16Z</published>
    <updated>2020-04-30T08:25:16Z</updated>
    <link rel="alternate" href="https://mitranim.com/posts/thoughts-on-the-egg"></link>
    <summary type="html"></summary>
    <author>
      <name>Nelo Mitranim</name>
      <email>me@mitranim.com</email>
    </author>
  </entry>
  <entry xml:base="https://mitranim.com/posts/tips-and-tricks-doom-2016">
    <title>Tips and tricks: Doom 2016</title>
    <id>https://mitranim.com/posts/tips-and-tricks-doom-2016</id>
    <content type="html"><![CDATA[<article role="main article" class="fan-typo"><p>Note: check the accompanying post <a href="/posts/game-impressions-doom-2016">Game Impressions: Doom 2016</a> for my thoughts on the game and an analysis of what makes it enjoyable.</p>

<p>This is about single player only; I haven&rsquo;t tried the PvP.</p>
<h2 id="table-of-contents"><span class="heading-prefix" aria-hidden="true"></span>Table of Contents<a href="#table-of-contents" class="heading-anchor" aria-hidden="true"></a></h2>
<ul>
<li><a href="#general"><span class="hash-prefix noprint" aria-hidden="true">#</span>General</a></li>
<li><a href="#runes"><span class="hash-prefix noprint" aria-hidden="true">#</span>Runes</a></li>
<li><a href="#utility-upgrades"><span class="hash-prefix noprint" aria-hidden="true">#</span>Utility Upgrades</a></li>
<li><a href="#weapon-mods"><span class="hash-prefix noprint" aria-hidden="true">#</span>Weapon Mods</a>

<ul>
<li><a href="#pistol"><span class="hash-prefix noprint" aria-hidden="true">#</span>Pistol</a></li>
<li><a href="#combat-shotgun"><span class="hash-prefix noprint" aria-hidden="true">#</span>Combat Shotgun</a></li>
<li><a href="#assault-rifle"><span class="hash-prefix noprint" aria-hidden="true">#</span>Assault Rifle</a></li>
<li><a href="#plasma-rifle"><span class="hash-prefix noprint" aria-hidden="true">#</span>Plasma Rifle</a></li>
<li><a href="#super-shotgun"><span class="hash-prefix noprint" aria-hidden="true">#</span>Super Shotgun</a></li>
<li><a href="#rocket-launcher"><span class="hash-prefix noprint" aria-hidden="true">#</span>Rocket Launcher</a></li>
<li><a href="#gauss-cannon"><span class="hash-prefix noprint" aria-hidden="true">#</span>Gauss Cannon</a></li>
<li><a href="#chaingun"><span class="hash-prefix noprint" aria-hidden="true">#</span>Chaingun</a></li>
<li><a href="#bfg-9000"><span class="hash-prefix noprint" aria-hidden="true">#</span>BFG 9000</a></li>
</ul></li>
<li><a href="#conclusion"><span class="hash-prefix noprint" aria-hidden="true">#</span>Conclusion</a></li>
</ul>
<h2 id="general"><span class="heading-prefix" aria-hidden="true"></span>General<a href="#general" class="heading-anchor" aria-hidden="true"></a></h2>
<p>If you find yourself bored, raise the difficulty, preferably to Nightmare. A non-Nightmare campaign can be upgraded only to Ultra-Violence, so you might have to start a new one.</p>

<p>The campaign is relatively short, but is never really &ldquo;over&rdquo;. You&rsquo;re meant to replay individual missions in arbitrary order. You always keep your guns and upgrades.</p>

<p>Glory Kills become less viable on Nightmare because other enemies attack while you&rsquo;re locked into a recovery animation. Under fire, you&rsquo;re better off just shooting them.</p>

<p>On Nightmare, enemy shots tend to lead the target. Straight movement gets you shot.</p>

<p>Some enemies have surprising moves and behaviors. Ranged enemies can suddenly rush into melee. Imps have surprisingly agile melee moves. Pinkies will track you surprisingly well while charging, and can quickly turn 180 degrees to smack you. The list goes on. The developers have done an amazing job with the enemy movesets. When you find yourself going &ldquo;WTF this move is bullshit!&rdquo;, appreciate the game&rsquo;s ability to surprise you!</p>

<p>With slow-firing weapons, it&rsquo;s faster to switch to another gun than wait for the recovery. Cycling between the Super Shotgun, Gauss Cannon, and Rocket Launcher, or at least two of these guns, can increase your burst DPS.</p>
<h2 id="runes"><span class="heading-prefix" aria-hidden="true"></span>Runes<a href="#runes" class="heading-anchor" aria-hidden="true"></a></h2>
<p>The runes are generally well-balanced, without any game-breakers or must-haves. Pick the ones that match your playstyle.</p>

<p>The Equipment Power rune allows Siphon Grenades to regenerate armor. Armored Offense lets you restore armor through Glory Kills. The Intimacy is Best rune helps this tactic by making enemies more easily staggered and keeping them alive. This stops being viable on Nightmare due to increased enemy aggression and damage. You get better results by focusing on not getting hit. You can recover off zombies between fights, but it&rsquo;s not worth the time.</p>

<p>In-Flight Mobility gives you more movement control in the air than you have on the ground. Handy for dodging.</p>

<p>Ammo Boost roughly doubles the ammo pickups. Makes ammo-intensive guns such as the Gauss Cannon more spammable. More consistently useful than Rich Get Richer.</p>

<p>Kills under the Berserk powerup count as Glory Kills. When berserking, use the appropriate runes, namely Seek and Destroy (launch from farther away), Savagery (kill faster), and Blood Fueled (move faster after Glory Kills). When Berserk ends, revert to your normal runes.</p>
<h2 id="utility-upgrades"><span class="heading-prefix" aria-hidden="true"></span>Utility Upgrades<a href="#utility-upgrades" class="heading-anchor" aria-hidden="true"></a></h2>
<p>I recommend <em>not</em> buying the &ldquo;exploration&rdquo; upgrades. You don&rsquo;t want to constantly check the map for secrets. Instead, you&rsquo;ll replay each level using a video guide. Worse, once you find all secrets, one of the upgrades keeps beeping when close to where a secret <em>used</em> to be, with no way to turn that off.</p>

<p>As for the other upgrades, I would prioritize becoming immune to barrel explosions, then faster weapon swapping and ledge grabbing. Grenade and powerup upgrades are more situational, so get them later. Your mileage may vary.</p>
<h2 id="weapon-mods"><span class="heading-prefix" aria-hidden="true"></span>Weapon Mods<a href="#weapon-mods" class="heading-anchor" aria-hidden="true"></a></h2>
<p>Most guns have one useful mod, and some guns are more useful than others. You can upgrade most useful things around halfway through the game. With all secrets and challenges, you can max out everything by the end.</p>

<p>See below for weapon mod tips.</p>
<h3 id="pistol"><span class="heading-prefix" aria-hidden="true"></span>Pistol<a href="#pistol" class="heading-anchor" aria-hidden="true"></a></h3>
<p>Has infinite ammo. Useful against zombies. They die from a single left-click headshot, but due to the low accuracy, you&rsquo;re better off with the right click at zero charge. Don&rsquo;t bother upgrading until you run out of useful upgrades for other guns. Don&rsquo;t bother using it against non-zombies, ammo is mostly a non-issue.</p>
<h3 id="combat-shotgun"><span class="heading-prefix" aria-hidden="true"></span>Combat Shotgun<a href="#combat-shotgun" class="heading-anchor" aria-hidden="true"></a></h3>
<p><em>Explosive Shot</em> is useful early; it gives you a strong, ammo-efficient mid-range attack that one-shots Imps and staggers Possessed Guards. Removing the charge delay makes it even better.</p>

<p><em>Charged Shot</em> is comparatively useless. The charge delay makes it too hard to line up, and it&rsquo;s weak even at its best. You get better results by just focusing on your movement and aim.</p>

<p>This gun is nearly-obsoleted by the scoped Assault Rifle you can get in Mission 2, and completely eclipsed by the Super Shotgun you find in Mission 4. Don&rsquo;t bother upgrading it much.</p>
<h3 id="assault-rifle"><span class="heading-prefix" aria-hidden="true"></span>Assault Rifle<a href="#assault-rifle" class="heading-anchor" aria-hidden="true"></a></h3>
<p><em>Tactical Scope</em> is the superior upgrade, if you can land headshots. Upgrades increase headshot damage <em>and</em> bullet damage, letting you one-headshot Imps and Possessed Guards, and two-headshot Hell Razers. With perfect aim, it&rsquo;s probably the quickest, most ammo-efficient way to murder humanoid enemies.</p>

<p><em>Micro-Missiles</em>, while undoubtedly cool, are useless. They&rsquo;re supposed to let you spend ammo faster for more DPS. This niche is already filled by the Chaingun. The Missiles&rsquo; DPS is <em>way</em> too low. The explosion radius is way too small. The explosion delay causes you to waste time and ammo. They have way too little stopping power, so enemies continue attacking you while being shot. Against humanoid enemies, which dominate the early game, you&rsquo;re better off headshotting them with the scope. Against tougher enemies, you need more DPS and/or stopping power, which every other gun does better.</p>

<p>Regardless of upgrades, the Assault Rifle DPS is too low against big hulky enemies, so it&rsquo;s better to specialize it against humanoids. In late game, it&rsquo;s superseded by the Rocket Launcher, which lets you clear minions faster and without exposing yourself as much.</p>
<h3 id="plasma-rifle"><span class="heading-prefix" aria-hidden="true"></span>Plasma Rifle<a href="#plasma-rifle" class="heading-anchor" aria-hidden="true"></a></h3>
<p><em>Stun Bomb</em> is overpowered. It instantly stuns enemies for several seconds, has a decently large radius, costs very little ammo, and has a short cooldown. It works on all non-boss enemies, even the hulky Mancubuses and Hell Barons. Get it, upgrade it, use it. Even though switching guns takes time, this actually increases your DPS by letting you safely shotgun enemies at melee range or line up a Gauss Cannon headshot. It also saves your ass against Pinkies, which charge with surprising speed and agility <em>and</em> have armored mugs.</p>

<p><em>Heat Blast</em> manages to be both useless <em>and</em> boring. It deals splash damage in front of you, enough to one-shot humanoid enemies even at partial charge, but not enough to kill Hell Knights and other tough guys. It&rsquo;s completely eclipsed by the Rocket Launcher, which is spammable, has range, and has better stopping power. Use the Stun Bomb instead.</p>

<p>The Plasma Rifle is useful only for the Stun Bomb. Its DPS is not particularly brag-worthy. For rapid-fire damage, a scoped Assault Rifle is much better: it deals more headshot damage, hits instantly, and shots don&rsquo;t obscure the screen. The Gauss Cannon is <em>much</em> better at converting Plasma Cells into damage, with enough left-click damage to instagib humanoid enemies, enough charged damage to one- or two-headshot many big enemies, and excellent stopping power. Upgrade the Stun Bomb and use this rifle only as a combo piece.</p>
<h3 id="super-shotgun"><span class="heading-prefix" aria-hidden="true"></span>Super Shotgun<a href="#super-shotgun" class="heading-anchor" aria-hidden="true"></a></h3>
<p>Amazingly useful weapon that completely supersedes the Combat Shotgun. High single-shot damage, DPS, and stopping power. Has no equal at melee range. All humanoids die from a single shot, and most tough guys die in 2-4.</p>

<p>This weapon has no mods, and upgrades improve its <em>primary</em> firing mode. The mastery upgrade effectively doubles the rate of fire. I recommend fully upgrading it right away. It can be found in a &ldquo;secret&rdquo; in Mission 4 (Argent Facility). Make sure to hoard enough upgrade points.</p>

<p>The stopping power is surprisingly handy. It stops charging enemies and interrupts attacks. This makes it easy to finish them off with the next shot. You still need to dodge attacks, but the interruptions make it a lot easier.</p>

<p>Combines well with the Stun Bomb. The stun lets you safely shotgun the enemy at melee range <em>and</em> makes it easier to aim. The stun lasts long enough for 2 cycles / 4 shots. With good enough aim, this kills anyone but a Hell Baron, and those die from another shot or two.</p>
<h3 id="rocket-launcher"><span class="heading-prefix" aria-hidden="true"></span>Rocket Launcher<a href="#rocket-launcher" class="heading-anchor" aria-hidden="true"></a></h3>
<p><em>Remote Detonation</em> makes the weapon better at its unique job: quickly clearing groups of enemies. It passively increases the splash radius and damage, and allows you to detonate the rocket in better positions, catching more foes in the blast. Humanoid-sized enemies tend to be instagibbed by splash damage. The weapon mastery prevents the rocket from exploding along with the payload, making it possible to shoot big targets while splashing off to kill any surrounding vermin. I suspect that detonating the payload just before it connects increases the damage, but this is tricky to verify.</p>

<p><em>Lock-on Burst</em> improves single target DPS, a job that other guns already do better. Humanoids already die from a single rocket, while big foes require more than one volley. It&rsquo;s not enough to compete the Super Shotgun, Gauss Cannon, or Chaingun. Cacodemons and Summoners can already be instakilled with a well-placed Precision Bolt. It&rsquo;s also suicidal at close range, which is exactly what the big meat boys charge into.</p>

<p>The Rocket Launcher&rsquo;s unique niche is to quickly kill groups of humanoid enemies. Late missions consist of arenas that spawn multiple waves, mixing humanoids and big guys. The launcher, particularly with the Remote Detonation evolution, is particularly good at killing humanoids with splash damage, requires very little aim, and can be used without exposing yourself. It easily supersedes the scoped Assault Rifle at this job. It also has good stopping power; while big guys require multiple rockets, said rockets will often stop their charge or briefly stop them from shooting you.</p>
<h3 id="gauss-cannon"><span class="heading-prefix" aria-hidden="true"></span>Gauss Cannon<a href="#gauss-cannon" class="heading-anchor" aria-hidden="true"></a></h3>
<p>Both Gauss Cannon upgrades let you charge a more powerful shot, with similar charge times and damage values.</p>

<p><em>Precision Bolt</em> is for long range, with a scope. A fully-charged Precision Bolt headshot instakills Hell Knights, Summoners and Cacodemons. Note that the Cacodemon weak spot is their eye, not the entire body. When upgraded, it doesn&rsquo;t impede your movement, but does impede aiming sensitivity, which is awkward at close range and even midrange. The mastery upgrade makes the victims explode, instakilling humanoid enemies in proximity, making the weapon useful against all targets.</p>

<p><em>Siege Mode</em> is for midrange, without a scope. Some enemies that die from a single Precision Bolt <em>headshot</em> also die from a single Siege Mode <em>body shot</em>; examples include Cacodemons, Summoners, Revenants, and possibly more. It also one-shots Pinkies in the mug, the only non-BFG weapon that does. Unlike Precision Bolt, it impedes your movement while charging; you can work around this by hiding around corners, which you should be doing anyway. The wide beam makes it less accuracy-dependent than Precision Bolt. It doesn&rsquo;t impede aiming sensitivity, but does impede movement, which is risky at close range.</p>

<p>The Gauss Cannon is very well-rounded and works against all targets at all ranges, as long as you have decent accuracy. The only problem is ammo. Depending on your ammo capacity, it ranges from 10 to 23 shots for normal or Precision Bolt, and from 5 to 11 shots for Siege Mode. Upgrading the ammo capacity, using the Chainsaw, and using the Ammo Boost rune help make it more spammable. Late-game arenas also have more ammo lying around.</p>
<h3 id="chaingun"><span class="heading-prefix" aria-hidden="true"></span>Chaingun<a href="#chaingun" class="heading-anchor" aria-hidden="true"></a></h3>
<p><em>Mobile Turret</em> has a (short) deployment time and impedes movement, but eliminates the spin-up time and greatly increases the fire rate. It deals very high single target DPS. Unlike the unmodded Chaingun, it doesn&rsquo;t impede your aim sensitivity.</p>

<p><em>Gatling Rotator</em> appears to be inferior to Mobile Turret in every way. It still has a spin-up time, still impedes your aim sensitivity, and doesn&rsquo;t have enough DPS to compete with other guns.</p>

<p>The Chaingun is supposed to have high single target DPS against big enemies. Unfortunately for the Chaingun, this niche doesn&rsquo;t need filling. Mancubuses are easy to avoid, Summoners are evasive, and the other big guys tend to rush into close range, asking for the Super Shotgun. The Chaingun also requires you to stay exposed while shooting while lacking any splash effects, risking getting crossfired. The Rocket Launcher is much better against enemy groups, and the Stun Bomb trivializes isolated targets regardless of your weapon choice.</p>
<h3 id="bfg-9000"><span class="heading-prefix" aria-hidden="true"></span>BFG 9000<a href="#bfg-9000" class="heading-anchor" aria-hidden="true"></a></h3>
<p>You find this gun about halfway through the game. It can instagib large groups of enemies.</p>

<p>The BFG shoots a slow projectile that damages all enemies around it and deals large damage on impact, kinda like the Quake 2 version. For better results, maximize the travel time by shooting into empty space rather than enemies or walls.</p>

<p>Maximum ammo is always 3, unaffected by suit upgrades. Starting with Mission 8 where you find it, each mission has a handful of BFG charges, so you get to use it sparingly. I don&rsquo;t know if chainsawing enemies can produce BFG ammo. The rough rule of thumb is that large arena-style rooms that spawn waves of enemies with often have a BFG charge. Some later-game arenas have more than one charge. The upgraded Ammo Boost rune gives <em>all</em> enemies, including zombies, a chance of drop a BFG charge regardless of how they die. This is handy if you find yourself relying on the BFG, and is the only way to replenish BFG charges in early missions.</p>

<p>Best targets for the BFG are whatever tends to kill you. Even the biggest enemies are easy prey to the Stun Bomb; enemies are more dangerous in numbers, particularly if the arena layout allows them to crossfire you. If you find yourself overwhelmed and cornered, the BFG guarantees breathing room to regain control of the fight.</p>

<p>The BFG doesn&rsquo;t instakill bosses, but deals serious damage and briefly stuns them, which is handy for interrupting hard-to-avoid attacks. Bosses occasionally drop BFG ammo in addition to all the other ammo they disgorge when damaged, so hoarding all 3 charges is basically wasting it.</p>
<h2 id="conclusion"><span class="heading-prefix" aria-hidden="true"></span>Conclusion<a href="#conclusion" class="heading-anchor" aria-hidden="true"></a></h2>
<p>That&rsquo;s all for now. Read the accompanying post <a href="/posts/game-impressions-doom-2016">Game Impressions: Doom 2016</a>, and have fun!</p>
</article>]]></content>
    <published>2019-04-25T12:00:00Z</published>
    <updated>2019-04-25T12:00:00Z</updated>
    <link rel="alternate" href="https://mitranim.com/posts/tips-and-tricks-doom-2016"></link>
    <summary type="html"><![CDATA[General tips, notes on difficulty, enemies, runes, weapons.]]></summary>
    <author>
      <name>Nelo Mitranim</name>
      <email>me@mitranim.com</email>
    </author>
  </entry>
  <entry xml:base="https://mitranim.com/posts/game-impressions-doom-2016">
    <title>Game impressions: Doom 2016</title>
    <id>https://mitranim.com/posts/game-impressions-doom-2016</id>
    <content type="html"><![CDATA[<article role="main article" class="fan-typo"><p>Spent the past week absorbed into Doom 2016. My &ldquo;let&rsquo;s play&rdquo; is being gradually released on Youtube: <a href="https://www.youtube.com/playlist?list=PLfygJGWNJ-9Vqxy5svyBTy0jIS8ggtDXd" target="_blank" rel="noopener noreferrer">playlist link<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a>. This post summarizes my impressions.</p>

<p>I&rsquo;ve tried to phrase this from my subjective perspective: &ldquo;what I like&rdquo; rather than &ldquo;what&rsquo;s good&rdquo;, because everyone likes different things. The accompanying post <a href="/posts/tips-and-tricks-doom-2016">Tips and Tricks: Doom 2016</a> contains advice on how to play, while this post analyzes the game&rsquo;s design. This is about single player only; I haven&rsquo;t tried the PvP.</p>
<h2 id="table-of-contents"><span class="heading-prefix" aria-hidden="true"></span>Table of Contents<a href="#table-of-contents" class="heading-anchor" aria-hidden="true"></a></h2>
<ul>
<li><a href="#overview"><span class="hash-prefix noprint" aria-hidden="true">#</span>Overview</a></li>
<li><a href="#difficulty"><span class="hash-prefix noprint" aria-hidden="true">#</span>Difficulty</a></li>
<li><a href="#monsters"><span class="hash-prefix noprint" aria-hidden="true">#</span>Monsters</a></li>
<li><a href="#upgrades"><span class="hash-prefix noprint" aria-hidden="true">#</span>Upgrades</a></li>
<li><a href="#weapons"><span class="hash-prefix noprint" aria-hidden="true">#</span>Weapons</a></li>
<li><a href="#runes"><span class="hash-prefix noprint" aria-hidden="true">#</span>Runes</a></li>
<li><a href="#replayability"><span class="hash-prefix noprint" aria-hidden="true">#</span>Replayability</a></li>
<li><a href="#conclusion"><span class="hash-prefix noprint" aria-hidden="true">#</span>Conclusion</a></li>
</ul>
<h2 id="overview"><span class="heading-prefix" aria-hidden="true"></span>Overview<a href="#overview" class="heading-anchor" aria-hidden="true"></a></h2>
<p>Things I like:</p>

<ul>
<li>Good performance, especially with Vulkan</li>
<li>Run &amp; gun fighting, with lots of movement and verticality</li>
<li>Monster design, with varied moves that can surprise you</li>
<li>Weapon design, with mods that give you more options to use and master</li>
<li>Upgrade system, mostly qualitative rather than quantitative</li>
<li>Implementation of difficulty that makes monsters more aggressive and accurate</li>
<li>Map design, with loops, shortcuts, verticality, secrets</li>
<li>Overall polish</li>
</ul>

<p>Things I don&rsquo;t like:</p>

<ul>
<li>Sluggish mouse cursor in menus</li>
<li>Unskippable scripted scenes</li>
<li>Doors that lock behind you</li>
<li>Occasional hangs and crashes when using Vulkan</li>
</ul>

<p>Things I&rsquo;m lukewarm on:</p>

<ul>
<li>The music needs more metal</li>
</ul>
<h2 id="difficulty"><span class="heading-prefix" aria-hidden="true"></span>Difficulty<a href="#difficulty" class="heading-anchor" aria-hidden="true"></a></h2>
<p>I really like how this game implements difficulty levels.</p>

<p>Difficulty doesn&rsquo;t seem to affect enemy spawns or enemy health. Instead, it makes them more aggressive, accurate, and damaging. You also get less health and armor from pickups. You have to pay more attention, think faster, dodge enemy attacks better. But monsters don&rsquo;t get any healthier. By playing well, you can still do a glorious slaughterfest, while always a few errors away from death. It checks your skill, not your gear or patience.</p>

<p>I particularly like how much difficulty is added through the enemy <em>behavior</em>, not through numbers. On lower difficulties, enemies pause between actions, while on Nightmare they won&rsquo;t give you any slack. Sometimes they will use surprising moves, like suddenly switching from long-range shooting to a melee rush. Their shots also start leading your movement, a subtle change that requires smarter dodging on your part.</p>

<p>This reminds me of the best 3rd person melee games, which use basically the same approach. In Devil May Cry 1/3/4/5, enemies get more aggressive and hit harder as you raise the difficulty. On the highest difficulty, you die in one hit. It&rsquo;s the ultimate skill check the requires a perfect performance. The game is carefully designed to make this hard but possible.</p>

<p>This isn&rsquo;t new to id Software games or shooters in general, but many still get it wrong. For example, I enjoy the Borderlands series, but it relies too much on stats, turning higher &ldquo;difficulties&rdquo; into a pure gear check, and is particularly guilty of bullet sponge enemies.</p>

<p>I also like that dying doesn&rsquo;t cost you time. The game saves between each &ldquo;arena&rdquo; encounter. Dying just forces you to replay the last encounter that killed you, and do it properly this time. Monsters also disgorge health packs when your health is low, and ammo is everywhere, so you can&rsquo;t get stuck by entering an arena unprepared. These nice quality-of-life features make higher difficulties comfortable while still dangerous.</p>

<p>If you consider yourself good at shooters, try the Nightmare difficulty. You&rsquo;ll die a lot while learning, but this just makes getting on top more rewarding.</p>
<h2 id="monsters"><span class="heading-prefix" aria-hidden="true"></span>Monsters<a href="#monsters" class="heading-anchor" aria-hidden="true"></a></h2>
<p>The game has a healthy variety of monsters, which are well-animated, well-programmed, and have a healthy variety of moves.</p>

<p>I feel like the monsters are animated better than in most games. There&rsquo;s a certain smooth, fluid feel to their moves. I&rsquo;m not educated enough to describe this in technical terms, but I certainly appreciate the animators&rsquo; work.</p>

<p>Some enemies have multiple attack patterns, which makes them harder to predict and requires you to pay more attention. For example, Imps can throw fireballs on the move, sometimes several in a row, sometimes while hanging from walls, or charge bigger fireballs. Attack frequency seems to vary; I haven&rsquo;t noticed a set pattern. Imps smoothly switch between ranged and melee. When close, they&rsquo;ll go for melee, and may pursue you aggressively. They can also just randomly decide to rush into melee on their own. Or they can start with melee and run away for ranged attacks. The lack of a set pattern breaks up the rhythm and requires attention, which I quite enjoy. This is similar for other ranged enemies, though Imps are probably the most complex.</p>

<p>Melee enemies are comparatively more primitive and predictable, but also have a bit of move variety. Hell Knights can jump-slam for splash damage, lunge to grab, turn around with an uppercut, and more. They&rsquo;ll always charge you, which makes them a bit <em>too</em> easy to predict. I would probably appreciate if melee monsters at least tried to dodge.</p>
<h2 id="upgrades"><span class="heading-prefix" aria-hidden="true"></span>Upgrades<a href="#upgrades" class="heading-anchor" aria-hidden="true"></a></h2>
<p>The game has four upgrade progressions:</p>

<ul>
<li>health, armor, ammo</li>
<li>utility systems</li>
<li>weapon mods</li>
<li>runes</li>
</ul>

<p>I don&rsquo;t really like the health and armor progressions. By the end, it doubles your health and triples the armor. It just boosts your numbers without changing how you play, exactly what I praise this game for <em>not</em> doing much. It adds to the power creep, widening the difficulty gap between the early and late missions and thus impeding replayability. The game could have been better without it.</p>

<p>Utility systems is stuff like faster weapon swapping or becoming immune to barrel explosions. They don&rsquo;t affect the game much; barrel immunity is the only major effect. I&rsquo;m guessing they added this to incentivize secret hunting. Fortunately, these upgrades don&rsquo;t increase your power much. They could be taken out of the game and nobody would notice.</p>

<p>I really like the design of weapon mods and runes, see below.</p>
<h2 id="weapons"><span class="heading-prefix" aria-hidden="true"></span>Weapons<a href="#weapons" class="heading-anchor" aria-hidden="true"></a></h2>
<p>The game has 8 guns, and 6 of them have &ldquo;mods&rdquo; for another firing mode. You gradually earn upgrade points, and can spend them to improve those mods even further.</p>

<p>What I really like about this design:</p>

<ul>
<li>Mods add a new option that needs skill to master</li>
<li>Most of them don&rsquo;t improve the main firing mode; no flat +power</li>
<li>In principle, this could virtually double the amount of guns</li>
</ul>

<p>Mod balance isn&rsquo;t perfect; I consider almost half of them useless. See the <a href="/posts/tips-and-tricks-doom-2016#weapon-mods">weapons section</a> of the accompanying tips &amp; tricks post. But I still really like the approach.</p>

<p>You can eventually obtain and max out all upgrades. The game doesn&rsquo;t stop you from playing with all of its toys.</p>

<p>The weapons themselves are what you&rsquo;d expect to find in a Doom game. Without mods, they&rsquo;re not particularly imaginative, at least nowhere near the level of Painkiller or Unreal Tournament. But mods and how they match up against different enemies are more than enough to compensate.</p>

<p>In a nice touch, late-game guns share ammo with early-game guns. This has numerous benefits. You can more reliably find ammo for any particular weapon. In intense fights, you don&rsquo;t have to cycle through unwanted guns just because you ran out of ammo for a favorite; chances are, you have a favorite for each ammo type. This also improves replayability: early missions have ammo for late-game weapons.</p>

<p>I appreciate the &ldquo;mastery&rdquo; challenges required for the last upgrades. Some of them force you to pay attention and try something new. For example, the Tactical Scope mastery requires many headshot kills, training you to use the Assault Rifle the right way. Without this challenge, I probably wouldn&rsquo;t realize how effective headshots are. The Precision Bolt challenge teaches you to one-headshot Hell Knights, which you normally wouldn&rsquo;t try. Not every challenge surprised me, but it&rsquo;s a good try of a good idea.</p>
<h2 id="runes"><span class="heading-prefix" aria-hidden="true"></span>Runes<a href="#runes" class="heading-anchor" aria-hidden="true"></a></h2>
<p>Runes passively change something about your character. You gradually earn 12, but can only use 3 at any time. This means you don&rsquo;t just max them out and forget about it; you&rsquo;ll keep thinking which runes to pick for a given situation or playstyle, which can be interesting.</p>

<p>Unlike other upgrades, they&rsquo;re unlocked <em>and</em> upgraded through challenges rather than points. The unlocking challenges teleport you into rooms with very strict rules, while the upgrade challenges are done through normal gameplay. Just as with weapon upgrades, I really like this approach. It provides a different kind of gameplay and can teach you something new. For example, one challenge requires you to survive a dangerous fight on 1 health. You might have to learn to dodge some attacks you didn&rsquo;t before. The same challenge also forces you to use a Gauss Cannon with an un-upgraded Siege Mode, which <em>stops your movement</em>; this suicidal tool turns out to be vital against charging Pinkies. That challenge can teach you a lot, and you wouldn&rsquo;t try that during normal gameplay.</p>

<p>Rune <em>upgrades</em> are done by performing a certain action N times. I find the requirements a bit too bland. Unlike weapon mastery challenges, they tend to require actions you&rsquo;re already doing: Glory Kill N demons, pick up N armor, and so on. They tend to just happen in the background without requiring much thought. But the overall concept is solid; I prefer it to any currency-based unlocks.</p>

<p>What I like the most is that rune bonuses are qualitative, not quantitative. No rune gives you flat +power. Instead, they make a change in your behavior. Consider In-Flight Mobility: it increases &ldquo;air control&rdquo;, which is how quickly you change direction in the air. As minute as it sounds, this is handy when enemy shots lead your movement and you need to change direction constantly. It&rsquo;s also handy for platforming. The only reason you can consider using this is because it doesn&rsquo;t compete with a rune for +damage or +protection. There isn&rsquo;t one, so you can play with the interesting qualitative effects. This also keeps the player&rsquo;s power in check, allowing to keep the early and late missions closer in terms of difficulty, which is important for replayability.</p>
<h2 id="replayability"><span class="heading-prefix" aria-hidden="true"></span>Replayability<a href="#replayability" class="heading-anchor" aria-hidden="true"></a></h2>
<p>This section shifts from praise to critique and talks about wider game design principles. Feel free to skip. I should probably develop this into a separate post.</p>

<p>I like the ability to replay missions in arbitrary order, while keeping and even advancing the upgrades. Would be even better if scripted scenes were skippable. That said, eventually you get bored.</p>

<p>I&rsquo;ve heard phrases like &ldquo;the game doesn&rsquo;t outstay its welcome, and that&rsquo;s fine&rdquo;. While logical, it misses a larger point. It assumes that boredom was inevitable. What <em>exactly</em> leads to it, and what could postpone it?</p>

<p>Many get bored during the first playthrough. Those people should raise the difficulty to Nightmare. You can&rsquo;t expect such a mechanics-centric game to be interesting when it doesn&rsquo;t challenge you. Let&rsquo;s talk about replayability <em>after</em> the first playthrough.</p>

<p>The game consists of a few fixed, hand-crafted maps. Each map spawns the same monsters in the same locations, and most objectives are linear. You can play missions in a different order, and for some time, there&rsquo;s variety in trying different guns, weapon mods, rune combinations, tactics, and learning how to handle each monster type. But eventually you memorize each map, each encounter, and start relying on pre-set patterns that trivialize any challenge.</p>

<p>In short: replayability requires novelty, and the fixed structure impedes it <em>by definition</em>.</p>

<p>The last few years, I&rsquo;ve been fascinated with how &ldquo;roguelike&rdquo; games make themselves endlessly replayable by branching or randomizing most elements of the gameplay. My favorites are FTL and Slay the Spire. They consist of short &ldquo;runs&rdquo;, and each run branches or randomizes the map, enemies, events, and the tools you get to use. This creates a combinatorial explosion of scenarios, making each run unique. In my view, the key to keeping it fresh is that each run, you have to adapt your tactics to the different tools and enemies you find, and that&rsquo;s only a fraction of the possible combinations, of the possible tactics. The more different it can be, the more potential variety there is, the better. Only the rules of the game need to stay consistent. The same principle should work for FPS games.</p>

<p>Traditional storytelling requires a mostly-linear structure. But in such a mechanics-centric game, I would happily trade the coherent narrative for branching or randomization that improves replayability. We can find other ways of telling the story. It could be pieced together from scattered pieces, like a puzzle. In Doom, the story is merely a backdrop for the action anyway.</p>

<p>FPS games with roguelike elements do exist, but it takes many attempts to produce a catchy masterpiece. Among hundreds if not thousands of tactical 2D roguelikes, I like only two: FTL and Slay the Spire. This doesn&rsquo;t mean <em>every</em> contender is worse, but they might not have gotten as lucky with marketing. The fact remains that it can take hundreds of games before a big success. So keep trying, developers.</p>
<h2 id="conclusion"><span class="heading-prefix" aria-hidden="true"></span>Conclusion<a href="#conclusion" class="heading-anchor" aria-hidden="true"></a></h2>
<p>That&rsquo;s all for now. Read the accompanying post <a href="/posts/tips-and-tricks-doom-2016">Tips and Tricks: Doom 2016</a>, and have fun!</p>
</article>]]></content>
    <published>2019-04-25T11:00:00Z</published>
    <updated>2019-04-25T11:00:00Z</updated>
    <link rel="alternate" href="https://mitranim.com/posts/game-impressions-doom-2016"></link>
    <summary type="html"><![CDATA[I really like Doom 2016, here's why.]]></summary>
    <author>
      <name>Nelo Mitranim</name>
      <email>me@mitranim.com</email>
    </author>
  </entry>
  <entry xml:base="https://mitranim.com/posts/astrotips">
    <title>Announcing Astrotips: video guides on Astroneer</title>
    <id>https://mitranim.com/posts/astrotips</id>
    <content type="html"><![CDATA[<article role="main article" class="fan-typo"><p>For the last month or so, I&rsquo;ve been absorbed by Astroneer (link: <a href="https://astroneer.space" target="_blank" rel="noopener noreferrer">https://astroneer.space<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a>). It&rsquo;s an amazing game that released just recently (Feb 6).</p>

<p>I&rsquo;ve started making video guides on it, tending towards more advanced aspects of the game that could otherwise go unnoticed or hard to figure out. The series, called Astrotips, has just started. Subscribe to my Youtube channel for regular updates. See you there!</p>

<p>Channel link: <a href="https://www.youtube.com/channel/UCt6dH_XZxJCgaa6vwqrwFxA" target="_blank" rel="noopener noreferrer">https://www.youtube.com/channel/UCt6dH_XZxJCgaa6vwqrwFxA<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a></p>

<p>Astrotips playlist: <a href="https://www.youtube.com/playlist?list=PLfygJGWNJ-9WaNWXim4P7lLwZ0ooSWLQ4" target="_blank" rel="noopener noreferrer">https://www.youtube.com/playlist?list=PLfygJGWNJ-9WaNWXim4P7lLwZ0ooSWLQ4<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a></p>
</article>]]></content>
    <published>2019-02-22T11:00:00Z</published>
    <updated>2019-02-22T11:00:00Z</updated>
    <link rel="alternate" href="https://mitranim.com/posts/astrotips"></link>
    <summary type="html"><![CDATA[A series of video guides, tips and tricks on Astroneer, an amazing space exploration and building game.]]></summary>
    <author>
      <name>Nelo Mitranim</name>
      <email>me@mitranim.com</email>
    </author>
  </entry>
  <entry xml:base="https://mitranim.com/posts/camel-case-abbr">
    <title>Don&#39;t abbreviate in camelCase</title>
    <id>https://mitranim.com/posts/camel-case-abbr</id>
    <content type="html"><![CDATA[<article role="main article" class="fan-typo"><p><strong>Edit 2020-10-21</strong>: see the newer post <a href="/posts/lang-case-conventions">Language Design: Case Conventions</a>.</p>

<p>Programming has the concept of an &ldquo;identifier&rdquo;. Identifiers are used for keywords, variable names, etc. Most languages restrict identifiers to Latin letters, digits, and an underscore.</p>

<p>An identifier may consist of several words without spaces. The commonly used <a href="https://en.wikipedia.org/wiki/Letter_case" target="_blank" rel="noopener noreferrer">case styles<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a> can distinguish individual words:</p>

<pre><code>oneTwo       -- lower camel case
OneTwo       -- title camel case
one_two      -- lower snake case
ONE_TWO      -- upper snake case
one-two      -- lower kebab case
ONE-TWO      -- upper kebab case
</code></pre>

<p>All have at least two desirable properties: &ldquo;separability&rdquo; and &ldquo;consistency&rdquo;. Words must be separable; consistency ensures this rule is followed without exceptions.</p>

<p>A problem peculiar to <code>TitleCamelCase</code> is how to treat abbreviations. Behold this monstrosity from JavaScript&rsquo;s DOM API:</p>

<pre><code>XMLHttpRequest
</code></pre>

<p>It&rsquo;s inconsistent: <code>XML</code> is spelled in capitals, while <code>HTTP</code> is spelled in title case, like a word. What gives? There were three ways to spell it out:</p>

<ol>
<li>Ignore abbreviations: <code>XmlHttpRequest</code></li>
<li>Let them combine into one: <code>XMLHTTPRequest</code></li>
<li>Use inconsistent casing: <code>XMLHttpRequest</code></li>
</ol>

<p>We see that (2) breaks separability while (3) breaks consistency. The general conclusion is that insisting on abbreviations leads to weird names, and is not compatible with the desirable properties of case styles.</p>

<p>The only generally consistent approach is to ignore abbreviations, i.e. treat them as words:</p>

<pre><code>XmlHttpRequest
</code></pre>

<p>As a bonus, non-abbreviated <code>TitleCamelCase</code> is easier to automatically parse, convert to other cases, and reverse. Example:</p>

<pre><code>XmlHttpRequest -&gt; xml_http_request -&gt; XmlHttpRequest
</code></pre>

<p>For automatic tools, parsing inconsistent abbreviation is not impossible; for example, my Sublime Text <a href="https://github.com/mitranim/sublime-caser" target="_blank" rel="noopener noreferrer">plugin<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a> for converting between cases can handle this. But it&rsquo;s still not reversible.</p>

<p>Finally, having just <em>one</em> choice means less thinking, which is good.</p>

<p>That&rsquo;s all.</p>
</article>]]></content>
    <published>2019-01-17T07:00:00Z</published>
    <updated>2019-01-17T07:00:00Z</updated>
    <link rel="alternate" href="https://mitranim.com/posts/camel-case-abbr"></link>
    <summary type="html"><![CDATA[CamelCase identifiers should avoid abbreviations, e.g. `JsonText` rather than `JSONText`.]]></summary>
    <author>
      <name>Nelo Mitranim</name>
      <email>me@mitranim.com</email>
    </author>
  </entry>
  <entry xml:base="https://mitranim.com/posts/remove-from-go">
    <title>Things I would remove from Go</title>
    <id>https://mitranim.com/posts/remove-from-go</id>
    <content type="html"><![CDATA[<article role="main article" class="fan-typo"><p>The <a href="https://golang.org" target="_blank" rel="noopener noreferrer">Go programming language<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a> espouses <a href="https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html" target="_blank" rel="noopener noreferrer">&ldquo;less is more&rdquo;<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a>. It prefers fewer features and &ldquo;one way of doing things&rdquo;. However, it still has some fat to lose! This article highlights what I consider unnecessary, and suggests the path to gradual deprecation and removal.</p>

<p>Goes without saying: <strong>this is an opinion piece</strong>. If we disagree, that&rsquo;s cool!</p>

<p>This is just what I consider <em>relatively easy to remove</em>. I have other complaints about Go, mostly related to its deep fundamentals that would be very hard or impossible to change. They&rsquo;re not mentioned in this piece.</p>

<p>We&rsquo;re not allowed to break existing code under Go1. However, it seems plausible to migrate most existing code in advance, preparing it for the hypothetical Go2 that removes the deprecated features, alongside other breaking changes it&rsquo;s expected to make. The following migration strategy seems realistic:</p>

<ul>
<li>Go1 adds two minor syntactic features (see below)</li>
<li>A tool like <code>go fix</code> converts existing code to the &ldquo;new&rdquo; style, avoiding the &ldquo;deprecated&rdquo; features</li>
<li>Both &ldquo;old&rdquo; and &ldquo;new&rdquo; code continues to run under Go1</li>
<li>Go2 drops the unnecessary features</li>
</ul>
<h2 id="table-of-contents"><span class="heading-prefix" aria-hidden="true"></span>Table of Contents<a href="#table-of-contents" class="heading-anchor" aria-hidden="true"></a></h2>
<ul>
<li><a href="#language"><span class="hash-prefix noprint" aria-hidden="true">#</span>Language</a>

<ul>
<li><a href="#prefer-var"><span class="hash-prefix noprint" aria-hidden="true">#</span>Remove <code>:=</code> in favor of <code>var</code></a></li>
<li><a href="#remove-paren-lists"><span class="hash-prefix noprint" aria-hidden="true">#</span>Remove parenthesized lists</a></li>
<li><a href="#remove-iota"><span class="hash-prefix noprint" aria-hidden="true">#</span>Maybe remove <code>iota</code></a></li>
<li><a href="#remove-new"><span class="hash-prefix noprint" aria-hidden="true">#</span>Remove <code>new</code> in favor of <code>&amp;</code></a></li>
<li><a href="#remove-dot-import"><span class="hash-prefix noprint" aria-hidden="true">#</span>Remove dot-import</a></li>
<li><a href="#remove-if-assignment"><span class="hash-prefix noprint" aria-hidden="true">#</span>Remove if-assignment</a></li>
<li><a href="#remove-short-float-syntax"><span class="hash-prefix noprint" aria-hidden="true">#</span>Remove short float syntax</a></li>
</ul></li>
<li><a href="#tools"><span class="hash-prefix noprint" aria-hidden="true">#</span>Tools</a>

<ul>
<li><a href="#gofmt-declarations"><span class="hash-prefix noprint" aria-hidden="true">#</span>Gofmt: align adjacent assignments</a></li>
</ul></li>
<li><a href="#misc"><span class="hash-prefix noprint" aria-hidden="true">#</span>Misc</a></li>
</ul>
<h2 id="language"><span class="heading-prefix" aria-hidden="true"></span>Language Changes<a href="#language" class="heading-anchor" aria-hidden="true"></a></h2><h3 id="prefer-var"><span class="heading-prefix" aria-hidden="true"></span>Remove <code>:=</code> in favor of <code>var</code><a href="#prefer-var" class="heading-anchor" aria-hidden="true"></a></h3><h4 id="arguments"><span class="heading-prefix" aria-hidden="true"></span>Arguments<a href="#arguments" class="heading-anchor" aria-hidden="true"></a></h4>
<p>1. Having two equivalent assignment forms is redundant.</p>

<p>2. <code>:=</code> can&rsquo;t justify itself with brevity. Compared to <code>var</code>, it requires one or two fewer keystrokes to type, but involves <code>Shift</code> and an awkward movement between <code>:</code> and <code>=</code>. Subjectively, I find <code>var</code> easier and faster to type.</p>

<p>3. Code sometimes needs to be converted between <code>:=</code>, <code>var</code> and <code>const</code>. For example, you have a string that&rsquo;s initially produced by <code>fmt.Sprintf</code>, but as you edit the code, it becomes a <code>const</code>. Or vice versa. I find these conversions fiddly and awkward. Converting between <code>var</code> and <code>const</code> is noticeably easier.</p>

<p>Moving a declaration between local and global scopes also involves converting between <code>:=</code> and <code>var</code>. This should be unnecessary.</p>

<p>4. Some idiomatic code already prefers <code>var</code>. For example, it&rsquo;s commonly used for zero values:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">buf</span> <span style="color:#a6e22e">bytes</span>.<span style="color:#a6e22e">Buffer</span>
<span style="color:#a6e22e">buf</span>.<span style="color:#a6e22e">WriteString</span>(<span style="color:#e6db74">&#34;hello world!&#34;</span>)
<span style="color:#a6e22e">_</span> = <span style="color:#a6e22e">buf</span>.<span style="color:#a6e22e">Bytes</span>()
</pre>
<p>5. As shown above, <code>var</code> allows to specify the type. Type inference is nice, but sometimes you <em>have</em> to spell it out:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822"><span style="color:#a6e22e">num</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">10</span>

<span style="color:#a6e22e">num</span> <span style="color:#f92672">:=</span> float64(<span style="color:#ae81ff">10</span>)

<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">num</span> <span style="color:#66d9ef">float64</span> = <span style="color:#ae81ff">10</span>

<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">num</span> = float64(<span style="color:#ae81ff">10</span>)
</pre>
<p>Without <code>:=</code>, you&rsquo;d have less choice, which is good.</p>

<p>6. <code>var</code> also allows the blank identifier:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">_</span> = <span style="color:#ae81ff">123</span> <span style="color:#75715e">// compiles
</span><span style="color:#75715e"></span><span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">123</span>    <span style="color:#75715e">// doesn&#39;t compile
</span></pre>
<p>7. <code>var</code> is also better for code highlighting. While writing a Go <a href="https://github.com/mitranim/sublime-gox" target="_blank" rel="noopener noreferrer">syntax definition<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a> for Sublime Text, I found that it&rsquo;s impossible to correctly scope the following:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822"><span style="color:#a6e22e">one</span>,
    <span style="color:#a6e22e">two</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">someExpression</span>
</pre>
<p>Scoping the variable names as declarations with <code>:=</code> requires multiline lookahead or backtracking, neither of which is supported in the modern Sublime Text syntax engine.</p>

<p>With <code>var</code>, this can be properly scoped without multiline lookahead or backtracking:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">one</span>,
    <span style="color:#a6e22e">two</span> = <span style="color:#a6e22e">someExpression</span>
</pre><h4 id="migration"><span class="heading-prefix" aria-hidden="true"></span>Migration<a href="#migration" class="heading-anchor" aria-hidden="true"></a></h4>
<p>Completely embracing <code>var</code> requires an addition to the language. Various forms of <code>if</code>, <code>for</code>, <code>select</code>, and <code>switch</code> currently support <code>:=</code> but not <code>var</code>:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822"><span style="color:#75715e">// compiles ok
</span><span style="color:#75715e"></span><span style="color:#66d9ef">select</span> {
    <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#f92672">&lt;-</span><span style="color:#a6e22e">errChan</span>:
    <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">msg</span> <span style="color:#f92672">:=</span> <span style="color:#f92672">&lt;-</span><span style="color:#a6e22e">msgChan</span>:
}

<span style="color:#75715e">// doesn&#39;t compile
</span><span style="color:#75715e"></span><span style="color:#66d9ef">select</span> {
    <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">err</span> = <span style="color:#f92672">&lt;-</span><span style="color:#a6e22e">errChan</span>:
    <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">msg</span> = <span style="color:#f92672">&lt;-</span><span style="color:#a6e22e">msgChan</span>:
}
</pre>
<p>For Go1, adding the missing <code>var</code> support would be a safe, backwards-compatible change.</p>

<p>See the related <a href="#gofmt-declarations"><span class="hash-prefix noprint" aria-hidden="true">#</span>gofmt change</a>.</p>
<h3 id="remove-paren-lists"><span class="heading-prefix" aria-hidden="true"></span>Remove parenthesized lists from <code>var</code>, <code>const</code>, <code>type</code>, <code>import</code><a href="#remove-paren-lists" class="heading-anchor" aria-hidden="true"></a></h3>
<p>Let&rsquo;s start with arguments in favor of the feature.</p>

<p>Currently, parenthesized lists have exactly <em>one</em> non-aesthetic reason to exist: <code>const (...)</code> enables the use of <code>iota</code>, acting as its scope.</p>

<p><code>import</code> is traditionally listed, so the keyword doesn&rsquo;t repeat:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822"><span style="color:#f92672">import</span> (
    <span style="color:#e6db74">&#34;bytes&#34;</span>
    <span style="color:#e6db74">&#34;encoding&#34;</span>
    <span style="color:#e6db74">&#34;encoding/base64&#34;</span>
)
</pre><pre tabindex="0" style="color:#f8f8f2;background-color:#272822"><span style="color:#f92672">import</span> <span style="color:#e6db74">&#34;bytes&#34;</span>
<span style="color:#f92672">import</span> <span style="color:#e6db74">&#34;encoding&#34;</span>
<span style="color:#f92672">import</span> <span style="color:#e6db74">&#34;encoding/base64&#34;</span>
</pre>
<p>That&rsquo;s a weak-ass justification for an entire language feature, made even weaker by <a href="https://godoc.org/golang.org/x/tools/cmd/goimports" target="_blank" rel="noopener noreferrer">goimports<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a> which edits your <code>imports</code> automatically.</p>

<p>Now, arguments against the feature.</p>

<p>Code should be convenient to type and edit. I think having options hinders that. Every time you write adjacent vars, some of your neurons are wasted on choosing between:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">one</span> = <span style="color:#a6e22e">_</span>
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">two</span> = <span style="color:#a6e22e">_</span>
</pre>
<p>and:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822"><span style="color:#66d9ef">var</span> (
    <span style="color:#a6e22e">one</span> = <span style="color:#a6e22e">_</span>
    <span style="color:#a6e22e">two</span> = <span style="color:#a6e22e">_</span>
)
</pre>
<p>Worse, it occasionally leads to menial conversions between the two. That&rsquo;s a waste of brainpower and typing. Let&rsquo;s say you have a single var:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">ichi</span> = <span style="color:#ae81ff">10</span>
</pre>
<p>Now you&rsquo;re adding another:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">ichi</span> = <span style="color:#ae81ff">10</span>
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">ni</span> = <span style="color:#ae81ff">20</span>
</pre>
<p>You might be compelled to convert to the list style:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822"><span style="color:#66d9ef">const</span> (
    <span style="color:#a6e22e">echi</span> = <span style="color:#ae81ff">10</span>
    <span style="color:#a6e22e">ni</span>   = <span style="color:#ae81ff">20</span>
)
</pre>
<p>We&rsquo;ve now wasted some brainpower and typing. Without lists, this would not have happened.</p>

<p>For consistency, the <code>go.mod</code> syntax should also remove lists.</p>
<h3 id="remove-iota"><span class="heading-prefix" aria-hidden="true"></span>Maybe remove <code>iota</code> due to removing lists<a href="#remove-iota" class="heading-anchor" aria-hidden="true"></a></h3>
<p><code>iota</code> requires parenthesized <code>const (...)</code> for scoping. Removing lists also leads to removing <code>iota</code>.</p>

<p>While I tend to avoid <code>iota</code>, I don&rsquo;t have a strong argument against it. If keeping <code>iota</code> in the language is important, then instead of removing lists entirely, we could just consider them non-idiomatic <em>unless</em> <code>iota</code> is used.</p>
<h3 id="remove-new"><span class="heading-prefix" aria-hidden="true"></span>Remove <code>new</code> in favor of <code>&amp;</code><a href="#remove-new" class="heading-anchor" aria-hidden="true"></a></h3>
<p><code>new</code> was relevant when <code>&amp;</code> was allowed only on &ldquo;storage locations&rdquo; such as variables and inner fields. Now that <code>&amp;</code> is allowed on <a href="https://golang.org/ref/spec#Composite_literals" target="_blank" rel="noopener noreferrer">composite literals<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a>, <code>new</code> is close to obsolete.</p>

<p><code>new</code> is limited to a zero value, while <code>&amp;</code> allows content:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822"><span style="color:#a6e22e">client</span> <span style="color:#f92672">:=</span> new(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Client</span>)
<span style="color:#a6e22e">client</span>.<span style="color:#a6e22e">Timeout</span> = <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Minute</span>

<span style="color:#a6e22e">client</span> = <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Client</span>{<span style="color:#a6e22e">Timeout</span>: <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Minute</span>}
</pre>
<p>Currently, <code>&amp;</code> doesn&rsquo;t work with non-composite literals:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822"><span style="color:#75715e">// doesn&#39;t compile
</span><span style="color:#75715e"></span><span style="color:#a6e22e">_</span> = <span style="color:#f92672">&amp;</span><span style="color:#e6db74">&#34;hello world!&#34;</span>
</pre>
<p>Before <code>new</code> can be removed, <code>&amp;</code> needs to be extended to support primitive literals. That would make it strictly more powerful than <code>new</code>. (<strong>Edit 2020-10-19</strong>: sadly this wouldn&rsquo;t be enough; some types, such as interfaces, don&rsquo;t have literals and can never be instantiated with <code>&amp;</code>, but can with <code>new</code>.)</p>

<p>Allowing <code>&amp;</code> on primitives would also make it easier to print Go data structures as code. Currently, pretty-printing libraries have to resort to ugly workarounds to support those types.</p>

<p>Note that most code can already be converted to <code>&amp;</code>. Code like <code>new(string)</code> or <code>new(int)</code> should be extremely rare in the wild.</p>

<p>For Go1, extending <code>&amp;</code> to primitive literals would be a safe, backwards-compatible change.</p>
<h3 id="remove-dot-import"><span class="heading-prefix" aria-hidden="true"></span>Remove dot-import: <code>import . &quot;some-package&quot;</code><a href="#remove-dot-import" class="heading-anchor" aria-hidden="true"></a></h3>
<p>Dot-import splurges all exported definitions from another package into the current scope:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822"><span style="color:#f92672">import</span> . <span style="color:#e6db74">&#34;fmt&#34;</span>

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
    <span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;hello world!&#34;</span>)
}
</pre>
<p>Having read a considerable amount of code in multiple languages with this import style, I&rsquo;m convinced that it&rsquo;s always a bad idea. Subjectively, it makes the code harder to understand and harder to track down the definitions. Objectively, it makes the code more fragile against changes.</p>
<h3 id="remove-if-assignment"><span class="heading-prefix" aria-hidden="true"></span>Remove if-assignment and derivatives: <code>if _ := _ ; _ {}</code><a href="#remove-if-assignment" class="heading-anchor" aria-hidden="true"></a></h3>
<p>Subjectively, I find this form annoying to type and annoying to read. Objectively, it&rsquo;s a choice, and this post is predicated on &ldquo;choice is bad&rdquo;. This wastes everyone&rsquo;s brainpower; anyone reading the code has to be aware of both syntactic forms.</p>

<p>Instead of two options:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822"><span style="color:#66d9ef">if</span> <span style="color:#a6e22e">ok</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">_</span>; <span style="color:#a6e22e">ok</span> { <span style="color:#a6e22e">_</span> }

<span style="color:#a6e22e">ok</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">_</span>
<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">ok</span> { <span style="color:#a6e22e">_</span> }
</pre>
<p>Let&rsquo;s leave just <em>one</em> option:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">ok</span> = <span style="color:#a6e22e">_</span>
<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">ok</span> { <span style="color:#a6e22e">_</span> }
</pre>
<p>If subscoping the variable is vital, just use a block. This also allows you to subscope more than one variable.</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822">{
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">ok</span> = <span style="color:#a6e22e">_</span>
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">ok</span> { <span style="color:#a6e22e">_</span> }
}
</pre><h3 id="remove-short-float-syntax"><span class="heading-prefix" aria-hidden="true"></span>Remove short float syntax<a href="#remove-short-float-syntax" class="heading-anchor" aria-hidden="true"></a></h3>
<p><span class="fg-gray-close">(This entry was added on 2020-06-11.)</span></p>

<p>In Go, the following forms are equivalent:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">_</span> = <span style="color:#ae81ff">0.123</span>
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">_</span> = <span style="color:#ae81ff">.123</span>
</pre>
<p>The short form works only for numbers below <code>0</code> and is not essential. The long form is essential and more general. Subjectively, I find the short form slightly harder to read; my brain starts thinking about typos and other syntactic forms involving dots. Objectively, it creates an unnecessary choice. Let&rsquo;s leave just one option: the &ldquo;long&rdquo; form.</p>
<h2 id="tools"><span class="heading-prefix" aria-hidden="true"></span>Tool Changes<a href="#tools" class="heading-anchor" aria-hidden="true"></a></h2><h3 id="gofmt-declarations"><span class="heading-prefix" aria-hidden="true"></span>Gofmt: align adjacent non-listed <code>var</code>, <code>const</code>, <code>type</code>, <code>import</code><a href="#gofmt-declarations" class="heading-anchor" aria-hidden="true"></a></h3>
<p>Currently, <code>gofmt</code> aligns adjacent assignments only in parenthesized lists:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822"><span style="color:#66d9ef">const</span> (
    <span style="color:#a6e22e">ichi</span> = <span style="color:#ae81ff">10</span>
    <span style="color:#a6e22e">ni</span>   = <span style="color:#ae81ff">20</span>
    <span style="color:#a6e22e">san</span>  = <span style="color:#ae81ff">30</span>
)

<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">ichi</span> = <span style="color:#ae81ff">10</span>
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">ni</span> = <span style="color:#ae81ff">20</span>
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">san</span> = <span style="color:#ae81ff">30</span>
</pre>
<p>After <a href="#remove-paren-lists"><span class="hash-prefix noprint" aria-hidden="true">#</span>removing parenthesized lists</a>, we probably want <code>gofmt</code> to align adjacent non-parenthesized assignments:</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">ichi</span> = <span style="color:#ae81ff">10</span>
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">ni</span>   = <span style="color:#ae81ff">20</span>
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">san</span>  = <span style="color:#ae81ff">30</span>
</pre><h2 id="misc"><span class="heading-prefix" aria-hidden="true"></span>Misc<a href="#misc" class="heading-anchor" aria-hidden="true"></a></h2>
<p>While writing this post, I tried to argue that complex numbers should be moved from built-ins to the standard library, but ended unconvinced.</p>

<p>Arguments for moving:</p>

<ul>
<li>removing built-ins simplifies the language</li>
<li>can implement additional math functions as methods</li>
<li>can implement encoding and decoding methods for various formats</li>
</ul>

<p>Arguments against moving:</p>

<ul>
<li>breaks code</li>
<li>additional functions can be provided as a package, mirroring <code>math</code></li>
<li>support for encoding and decoding can be added to the corresponding packages: <code>strconv</code>, <code>fmt</code>, <code>encoding/json</code>, <code>encoding/xml</code>, etc.</li>
</ul>

<p>In the end, I&rsquo;m not convinced that it&rsquo;s worthwhile.</p>

<hr />

<p>Have any thoughts? Let me know!</p>
</article>]]></content>
    <published>2019-01-15T01:00:00Z</published>
    <updated>2019-01-15T01:00:00Z</updated>
    <link rel="alternate" href="https://mitranim.com/posts/remove-from-go"></link>
    <summary type="html"><![CDATA[If less is more, Go could gain by losing weight.]]></summary>
    <author>
      <name>Nelo Mitranim</name>
      <email>me@mitranim.com</email>
    </author>
  </entry>
  <entry xml:base="https://mitranim.com/posts/back-from-hiatus-2019">
    <title>Back from hiatus (2019)</title>
    <id>https://mitranim.com/posts/back-from-hiatus-2019</id>
    <content type="html"><![CDATA[<article role="main article" class="fan-typo"><p>Welcome and/or welcome back!</p>

<p>This place is intended as a blog about programming and tech in general, possibly with a sprinkling of philosophy and entertainment. There was a burst of activity in 2015, followed by three and a half years of hiatus.</p>

<p>In 2019, I intend to blog regularly. I have a huge backlog of topics to cover and opinions to share. They roughly fall in the following categories:</p>

<ul>
<li>programming language design</li>
<li>thoughts and observations on software development</li>
<li>everything bad about software; downer warning!</li>
<li>game and anime impressions</li>
<li>game design from player perspective</li>
</ul>

<p>Subscribe via <a href="/feed.xml" class="decorate-link" target="_blank" rel="noopener noreferrer">Atom<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a> or <a href="/feed_rss.xml" class="decorate-link" target="_blank" rel="noopener noreferrer">RSS<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a> and enjoy!</p>
</article>]]></content>
    <published>2019-01-15T00:00:00Z</published>
    <updated>2019-01-15T00:00:00Z</updated>
    <link rel="alternate" href="https://mitranim.com/posts/back-from-hiatus-2019"></link>
    <summary type="html"><![CDATA[Back to blogging after three and a half years.]]></summary>
    <author>
      <name>Nelo Mitranim</name>
      <email>me@mitranim.com</email>
    </author>
  </entry>
  <entry xml:base="https://mitranim.com/posts/cheating-for-performance-pjax">
    <title>Cheating for performance with pjax</title>
    <id>https://mitranim.com/posts/cheating-for-performance-pjax</id>
    <content type="html"><![CDATA[<article role="main article" class="fan-typo"><h2 id="overview"><span class="heading-prefix" aria-hidden="true"></span>Overview<a href="#overview" class="heading-anchor" aria-hidden="true"></a></h2><p>Optimizing website performance is tricky. There&rsquo;s plenty of articles delving deep into technical detail, like <a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/analyzing-crp?hl=en" target="_blank" rel="noopener noreferrer">this great guide<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a> by Google. Naturally, when you make it that hard, most people aren&rsquo;t going to bother.</p>

<p>What if I told you there&rsquo;s a way to dramatically speed up page transitions just by adding a library? With zero or few code changes? And it&rsquo;s overlooked by the contemporary blogosphere?</p>

<p class="size-large">
    <span>Demo time!</span>
    <a href="https://mitranim.com/simple-pjax/" class="decorate-link" target="_blank" rel="noopener noreferrer">https://mitranim.com/simple-pjax/<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a>
</p>

<p>Who benefits from this?</p>

<ul class="unstyled-list">
    <li><span class="fg-blue">✓</span> typical server-rendered sites</li>
    <li><span class="fg-blue">✓</span> statically generated sites</li>
    <li><span class="fg-red">✕</span> but not SPA (they already enjoy clientside routing)</li>
</ul>

<p>As you might have guessed, we&rsquo;re going to exploit clientside routing with <code>history.pushState</code>. It&rsquo;s usually considered a domain of client-rendered SPA, but what a mistake that is!</p>

<p>When you think about it, the status quo of content delivery on the web is <em>insane</em>. We&rsquo;re forcing visitors to make dozens of network connections and execute massive amounts of JavaScript on <em>each page load</em> on the same site.</p>

<p class="size-large">👎 Typical page transition</p>

<ol>
    <li>Link clicked</li>

    <ul class="unstyled-list">
        <li>✅ download new document
        <li>💀 throw away JS runtime
        <li>💀 throw away websocket connections
        <li>💩 304 requests for stylesheets, scripts, old images, fonts</li>
        <li>✅ download new images if needed</li>
    </ul>

    <li>More work!</li>
    <ul class="unstyled-list">
        <li>💀 create new JS runtime</li>
        <li>💀 rerun all scripts</li>
        <li>🎂 display new document, with images and fonts flickering in</li>
        <li>💀 negotiate new websocket connections</li>
    </ul>
</ol>

<p>With pushstate routing, we can do better.</p>

<p class="size-large">👍 Page transition with pjax</p>

<ol>
    <li>Link clicked</li>

    <ul class="unstyled-list">
        <li>✅ download new document</li>
        <li>✅ download new images if needed</li>
    </ul>

    <li>🎂 display new document 🎉</li>
</ol>
<h2 id="implementation"><span class="heading-prefix" aria-hidden="true"></span>Implementation<a href="#implementation" class="heading-anchor" aria-hidden="true"></a></h2>
<p>The idea is dead simple. Say a user navigates from page A to page B on your site. Instead of a full page reload, fetch B by ajax, replace A, and update the URL using <code>history.pushState</code>. This technique has been termed <em><code>pjax</code></em>.</p>

<p>Here&rsquo;s a super naive example to illustrate the point. (DON&rsquo;T COPY THIS, SEE BELOW)</p>
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822">document.<span style="color:#a6e22e">addEventListener</span>(<span style="color:#e6db74">&#39;click&#39;</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">event</span>) {
    <span style="color:#75715e">// Find a clicked &lt;a&gt;, if any.
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">anchor</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">event</span>.<span style="color:#a6e22e">target</span>
    <span style="color:#66d9ef">do</span> {
        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">anchor</span> <span style="color:#66d9ef">instanceof</span> <span style="color:#a6e22e">HTMLAnchorElement</span>) <span style="color:#66d9ef">break</span>
    } <span style="color:#66d9ef">while</span> (<span style="color:#a6e22e">anchor</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">anchor</span>.<span style="color:#a6e22e">parentElement</span>)
    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">anchor</span>) <span style="color:#66d9ef">return</span>

    <span style="color:#a6e22e">event</span>.<span style="color:#a6e22e">preventDefault</span>()

    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">xhr</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">XMLHttpRequest</span>()

    <span style="color:#a6e22e">xhr</span>.<span style="color:#a6e22e">onload</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>() {
        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">xhr</span>.<span style="color:#a6e22e">status</span> <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">200</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">xhr</span>.<span style="color:#a6e22e">status</span> <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">299</span>) <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">xhr</span>.<span style="color:#a6e22e">onerror</span>()
        <span style="color:#75715e">// Update the URL to match the clicked link.
</span><span style="color:#75715e"></span>        <span style="color:#a6e22e">history</span>.<span style="color:#a6e22e">pushState</span>(<span style="color:#66d9ef">null</span>, <span style="color:#e6db74">&#39;&#39;</span>, <span style="color:#a6e22e">anchor</span>.<span style="color:#a6e22e">href</span>)
        <span style="color:#75715e">// Replace the old document with the new content.
</span><span style="color:#75715e"></span>        document.<span style="color:#a6e22e">body</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">xhr</span>.<span style="color:#a6e22e">responseXML</span>.<span style="color:#a6e22e">body</span>
        window.<span style="color:#a6e22e">scrollTo</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>)
    }

    <span style="color:#a6e22e">xhr</span>.<span style="color:#a6e22e">onerror</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">xhr</span>.<span style="color:#a6e22e">onabort</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">xhr</span>.<span style="color:#a6e22e">ontimeout</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>() {
        <span style="color:#75715e">// Ensure a normal page transition.
</span><span style="color:#75715e"></span>        <span style="color:#a6e22e">history</span>.<span style="color:#a6e22e">pushState</span>(<span style="color:#66d9ef">null</span>, <span style="color:#e6db74">&#39;&#39;</span>, <span style="color:#a6e22e">anchor</span>.<span style="color:#a6e22e">href</span>)
        <span style="color:#a6e22e">location</span>.<span style="color:#a6e22e">reload</span>()
    }

    <span style="color:#a6e22e">xhr</span>.<span style="color:#a6e22e">open</span>(<span style="color:#e6db74">&#39;GET&#39;</span>, <span style="color:#a6e22e">anchor</span>.<span style="color:#a6e22e">href</span>)
    <span style="color:#75715e">// This will automatically parse the response as XML on the fly.
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">xhr</span>.<span style="color:#a6e22e">responseType</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;document&#39;</span>
    <span style="color:#a6e22e">xhr</span>.<span style="color:#a6e22e">send</span>(<span style="color:#66d9ef">null</span>)
})
</pre>
<p>I have fashioned this into a simple, fully automatic <a href="https://github.com/mitranim/simple-pjax" target="_blank" rel="noopener noreferrer">library<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a>. Just drop it into your site and enjoy the benefits. Feedback and contributions are welcome! If you happen to find a better implementation, I&rsquo;d be happy to hear about it.</p>
<h2 id="benefits"><span class="heading-prefix" aria-hidden="true"></span>Benefits<a href="#benefits" class="heading-anchor" aria-hidden="true"></a></h2>
<p>Despite the simplicity, the benefits are stunning. This gives your multi-page website most of the advantages enjoyed by SPA. The browser gets to keep the same JavaScript runtime and all downloaded assets, including images, fonts, stylesheets, etc. This dramatically improves page load times, particularly on poor connections such as mobile networks. This also lets you maintain a persistent websocket connection while the user navigates your server-rendered multi-page app!</p>

<p>Also, I can&rsquo;t overstate how wasteful it is to execute all scripts on each new page load, which is typical for most websites. I just checked <a href="https://wired.com" target="_blank" rel="noopener noreferrer">Wired<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a> and the total execution time of all scripts was <strong>480 ms</strong> <em>before</em> ads kicked in. Each new page reruns all scripts. Using pjax, you can eliminate this waste, keeping your website more responsive and saving the visitors&rsquo; CPU cycles and battery life.</p>
<h2 id="gotchas"><span class="heading-prefix" aria-hidden="true"></span>Gotchas<a href="#gotchas" class="heading-anchor" aria-hidden="true"></a></h2>
<p>You need to watch out for code that modifies the DOM on page load. Most websites have this in the form of analytics and UI widgets. When transitioning to a new page, that code must be re-executed to modify the new document body.</p>

<p>Before a transition, you&rsquo;ll need to perform teardown like unmounting React components or destroying jQuery plugins. Do that in a document-level <code>simple-pjax-before-transition</code> event listener.</p>

<p>After a transition, you&rsquo;ll need to run the same setup as on the first page load. Do that in a document-level <code>simple-pjax-after-transition</code> event listener.</p>

<p><code>simple-pjax</code> also reruns any inline scripts found in the new document body, which makes it compatible out-of-the-box with common analytics snippets.</p>

<p>You&rsquo;ll also need to take special care of widget libraries with a fragile DOM lifecycle, like Angular or Polymer. They break when document body is replaced. Notably, React is perfectly compatible; just make sure to unmount all components before replacing the body.</p>
<h2 id="prior-art"><span class="heading-prefix" aria-hidden="true"></span>Prior Art<a href="#prior-art" class="heading-anchor" aria-hidden="true"></a></h2>
<p>Pjax has been around for a few years. There are a few implementations floating around, like the eponymous jQuery <a href="https://github.com/defunkt/jquery-pjax" target="_blank" rel="noopener noreferrer">plugin<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a>. Pjax is baked into Ruby on Rails and YUI. Many sites use it in one form or another.</p>

<p>Why isn&rsquo;t pjax more popular? Maybe because people overengineer it. The libraries I&rsquo;ve seen tend to focus on downloading partials (HTML snippets). They require you to micromanage the markup, and some need a special server configuration. I think these people have missed the point. The biggest benefit is keeping the browsing session alive, and this can be achieved with zero configuration or thought. For most sites, this is enough, and additional effort is usually not worth it. Is this wrong? You tell me!</p>

<p>Let&rsquo;s use this technique to improve the web!</p>
</article>]]></content>
    <published>2015-07-25T00:00:00Z</published>
    <updated>2015-07-25T00:00:00Z</updated>
    <link rel="alternate" href="https://mitranim.com/posts/cheating-for-performance-pjax"></link>
    <summary type="html"><![CDATA[Faster page transitions, for free.]]></summary>
    <author>
      <name>Nelo Mitranim</name>
      <email>me@mitranim.com</email>
    </author>
  </entry>
  <entry xml:base="https://mitranim.com/posts/cheating-for-website-performance">
    <title>Cheating for website performance</title>
    <id>https://mitranim.com/posts/cheating-for-website-performance</id>
    <content type="html"><![CDATA[<article role="main article" class="fan-typo"><p>Have been turning into a bit of a performance nut lately. This is what I&rsquo;ve
found useful for speeding up websites. These are mostly frontend optimizations;
I&rsquo;m not going to delve into server performance here.</p>
<h2 id="table-of-contents"><span class="heading-prefix" aria-hidden="true"></span>Table of Contents<a href="#table-of-contents" class="heading-anchor" aria-hidden="true"></a></h2>
<ul>
<li><a href="#minify-everything"><span class="hash-prefix noprint" aria-hidden="true">#</span>Minify Everything</a></li>
<li><a href="#concatenate-everything"><span class="hash-prefix noprint" aria-hidden="true">#</span>Concatenate Everything</a></li>
<li><a href="#use-pjax"><span class="hash-prefix noprint" aria-hidden="true">#</span>Use Pjax</a></li>
<li><a href="#use-server-rendering"><span class="hash-prefix noprint" aria-hidden="true">#</span>Use Server Rendering</a></li>
<li><a href="#make-your-javascript-lazy"><span class="hash-prefix noprint" aria-hidden="true">#</span>Make Your JavaScript Lazy</a></li>
<li><a href="#use-font-icons-or-inline-svg"><span class="hash-prefix noprint" aria-hidden="true">#</span>Use Font Icons or Inline SVG</a></li>
<li><a href="#serve-static-assets"><span class="hash-prefix noprint" aria-hidden="true">#</span>Serve Static Assets</a></li>
<li><a href="#reduce-latency"><span class="hash-prefix noprint" aria-hidden="true">#</span>Reduce Latency</a></li>
<li><a href="#consider-a-static-website"><span class="hash-prefix noprint" aria-hidden="true">#</span>Consider a Static Website</a></li>
</ul>
<h2 id="minify-everything"><span class="heading-prefix" aria-hidden="true"></span>Minify Everything<a href="#minify-everything" class="heading-anchor" aria-hidden="true"></a></h2>
<p>By far the most important thing to optimize is images. There are great free tools like <a href="http://www.graphicsmagick.org" target="_blank" rel="noopener noreferrer">graphicsmagick<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a> that let you automatically compress images without visible quality loss, rescale to different dimensions, crop, etc. They can be a <a href="https://github.com/scalableminds/gulp-image-resize" target="_blank" rel="noopener noreferrer">part<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a> of your standard build chain, so there&rsquo;s absolutely no excuse for not using them. See <a href="https://github.com/mitranim/stylific/blob/master/gulpfile.js" target="_blank" rel="noopener noreferrer">example<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a> (scroll down to image processing).</p>

<p>Another important thing to compress is JavaScript. Modern JavaScript libraries
(and hopefully your application&rsquo;s code) tend to be richly commented, bloating
the source size, with the expectation of being minified for production use. With
massive frameworks like Angular, React, or Polymer, the total size easily
rockets past a megabyte. Minification gets it down to manageable size.</p>

<p>Minifying CSS is usually less important, but like everything else, it&rsquo;s a
useful optimization and there&rsquo;s no excuse for not doing it.</p>
<h2 id="concatenate-everything"><span class="heading-prefix" aria-hidden="true"></span>Concatenate Everything<a href="#concatenate-everything" class="heading-anchor" aria-hidden="true"></a></h2>
<p>Network latency is a huge deal. I can&rsquo;t stress this enough. Depending on the
connectivity between your servers and your users, latency could range from 50ms
to as much as a second.</p>

<p>If you serve assets as multiple independent files, the browser has to make
separate network requests for each. Browsers only download a few assets at a
time, stalling other requests, which means any additional, say, stylesheets
delay the <em>beginning</em> of loading for other assets like images or fonts. Even
when everything is cached and elicits a 304 &ldquo;not modified&rdquo; response, the browser
still has to wait longer before rendering the entirety of the page.</p>

<p>That&rsquo;s bad. To avoid that, make sure to concatenate assets used on each page,
like stylesheets, scripts, and icons (see below on that).</p>
<h2 id="use-pjax"><span class="heading-prefix" aria-hidden="true"></span>Use Pjax<a href="#use-pjax" class="heading-anchor" aria-hidden="true"></a></h2>
<p><strong>Update</strong>: see this <a href="/posts/cheating-for-performance-pjax">in-depth post</a> on pjax.</p>

<p>Pjax is a cheap trick that combines <code>history.pushState</code> and <code>ajax</code> to mimic page
transitions without actually reloading the page.</p>

<p>The basic idea is dead simple and can be implemented in a few lines of code.
Attach a document-level event listener to intercept clicks on <code>&lt;a&gt;</code> elements. If
the clicked link leads to an internal page, fetch the page by ajax, replace the
contents of the current page, and replace the URL using <code>pushState</code>. For
browsers that don&rsquo;t support this API, you simply fall back to normal page
transitions.</p>

<p>Despite the simplicity, the benefits are stunning. It gives you most of the
advantages enjoyed by SPA (single page applications). The browser gets to keep
the same JavaScript runtime and all downloaded assets, including images, fonts,
stylesheets, etc. This dramatically improves page load times, particularly on
poor connections such as mobile networks. This also lets you maintain a
persistent WebSocket connection while the user navigates your server-rendered
multi-page app!</p>

<p>There are a few <a href="https://github.com/defunkt/jquery-pjax" target="_blank" rel="noopener noreferrer">implementations<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a> in the wild, but they require clientside <em>and</em> server-side configuration. If you&rsquo;re like me, this will seem like a waste of time. The biggest benefit of pjax is keeping the browsing session. Micromanaging partial templates is probably not worth your time, but everyone&rsquo;s needs are different.</p>

<p>I wrote a <a href="https://github.com/mitranim/simple-pjax" target="_blank" rel="noopener noreferrer">simple pjax library<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a> that works with zero config. Check the <a href="https://github.com/mitranim/simple-pjax#gotchas" target="_blank" rel="noopener noreferrer">gotchas<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a> to see if it&rsquo;s usable for your site, then give it a spin or roll your own! The library is also used on this very site. Inspect the network console to observe the effects.</p>
<h2 id="use-server-rendering"><span class="heading-prefix" aria-hidden="true"></span>Use Server Rendering<a href="#use-server-rendering" class="heading-anchor" aria-hidden="true"></a></h2>
<p>There&rsquo;s a trend towards single page applications (SPA) with clientside routing
and rendering. They tend to skip server-side rendering in favor of being
data-driven, usually through a RESTful API. As a result, they tend to have slow
initial page loads. This is bad, particularly on slow connections, which is
typical for mobile.</p>

<p>Practice has shown that for consumer-facing websites, initial load time matters.
On top of that, lack of prerendering costs you SEO. Don&rsquo;t fall into this trap;
server rendering is a sacrifice you don&rsquo;t have to make. Some JavaScript UI
libraries, like React, already support isomorphic routing and rendering, and
other frameworks, like Angular 2 and Ember, are planning to support it. Make
sure to research this feature for your stack of choice.</p>
<h2 id="make-your-javascript-lazy"><span class="heading-prefix" aria-hidden="true"></span>Make Your JavaScript Lazy<a href="#make-your-javascript-lazy" class="heading-anchor" aria-hidden="true"></a></h2>
<p>If your application is JavaScript-heavy, you should use a module system with lazy loading. This is supported by the ES6 module system, and you can use it today with <a href="https://github.com/systemjs/systemjs" target="_blank" rel="noopener noreferrer">SystemJS<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a> and, optionally, <a href="https://jspm.io" target="_blank" rel="noopener noreferrer">jspm<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a>. You can also achieve a similar effect with AMD.</p>

<p>The core parts of the application should be bundled into a single file, and big but optional parts may be imported asynchronously when needed. If your app is small, you can skip lazy loading and bundle the entire app.</p>
<h2 id="use-font-icons-or-inline-svg"><span class="heading-prefix" aria-hidden="true"></span>Use Font Icons or Inline SVG<a href="#use-font-icons-or-inline-svg" class="heading-anchor" aria-hidden="true"></a></h2>
<p>Most sites need icons. In the past, we had to use raster images. However, in the
days of widespread retina displays, <code>@font-face</code>, and SVG, that&rsquo;s a poor option.
Hopefully you have switched to the vector alternatives: icon fonts and SVG
icons. They scale to any display sharpness and are easy to style with CSS.</p>

<p>SVGs can be embedded into the document or base64-encoded directly into your CSS,
eliminating icon flicker on page load. They can also be directly manipulated
with JavaScript for cool visual effects. On the other hand, icon fonts are
easier to set up and use, and cost less bandwidth than embedded SVGs. For most
sites, a mix of both solutions will probably be optimal.</p>
<h2 id="serve-static-assets"><span class="heading-prefix" aria-hidden="true"></span>Serve Static Assets<a href="#serve-static-assets" class="heading-anchor" aria-hidden="true"></a></h2>
<p>This goes without saying, but you should double check to make sure your server
is properly configured for static files like images, stylesheets, and scripts.
It should include headers that tell the browser to cache the file, and respond
with 304 for unchanged assets. This eliminates a lot of redownloading, reducing
latency+download time to latency+0.</p>
<h2 id="reduce-latency"><span class="heading-prefix" aria-hidden="true"></span>Reduce Latency<a href="#reduce-latency" class="heading-anchor" aria-hidden="true"></a></h2>
<p>Network latency is a huge deal. It&rsquo;s a part of each request made by the browser,
even for static assets with 304 responses. The browser blocks page rendering
while downloading the document and anything included in <code>&lt;head&gt;</code>, which defines
how snappy or sluggish your site feels. The browser may also wait for the first
few images (Firefox seems to have this tendency), or it may choose to render the
page and later flicker them into view, and latency determines how quickly this
happens.</p>

<p>On many sites, the document is rendered dynamically and involves database
access. This absolutely needs to be fast, but this work is usually done once per
page load. The rest comes from network latency for the document and assets. Make
sure to use a web hosting with low latency times for your target audience. If
your audience is all over the world, pick a server with good average latency and
use a caching proxy / CDN like CloudFlare to reduce latency for static content.</p>
<h2 id="consider-a-static-website"><span class="heading-prefix" aria-hidden="true"></span>Consider a Static Website<a href="#consider-a-static-website" class="heading-anchor" aria-hidden="true"></a></h2>
<p>Simple websites with one maintainer, like a personal page or a blog, don&rsquo;t need a scripting engine with a database. You can prerender them into HTML files, then serve with nginx or on a service like Github Pages. Dynamic functionality can be implemented with ajax.</p>

<p>Serving static files is naturally more performant than rendering templates on each request. They&rsquo;re also automatically subject to caching. When the base document is cached, some browsers may serve the entire page, including assets, from the cache, rendering it with zero latency.</p>

<p>Static site generators are <a href="https://www.staticgen.com" target="_blank" rel="noopener noreferrer">plentiful<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a>, and if they don&rsquo;t float your boat, you can write your <a href="https://github.com/mitranim/mitranim.github.io" target="_blank" rel="noopener noreferrer">own<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a> in an afternoon.</p>
</article>]]></content>
    <published>2015-03-11T00:00:00Z</published>
    <updated>2015-03-11T00:00:00Z</updated>
    <link rel="alternate" href="https://mitranim.com/posts/cheating-for-website-performance"></link>
    <summary type="html"><![CDATA[Frontend tips for speeding up websites.]]></summary>
    <author>
      <name>Nelo Mitranim</name>
      <email>me@mitranim.com</email>
    </author>
  </entry>
  <entry xml:base="https://mitranim.com/posts/keeping-things-simple">
    <title>Keeping things simple</title>
    <id>https://mitranim.com/posts/keeping-things-simple</id>
    <content type="html"><![CDATA[<article role="main article" class="fan-typo"><p>Lately I&rsquo;ve been trying to figure out how to write shorter programs. Or, more generally, how to design simple solutions.</p>

<p>I often hear that &ldquo;less is more&rdquo;, that you should <a href="https://en.wikipedia.org/wiki/KISS_principle" target="_blank" rel="noopener noreferrer">KISS<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a> and follow <a href="https://en.wikipedia.org/wiki/YAGNI" target="_blank" rel="noopener noreferrer">YAGNI<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a>, yada yada. A small program is easy to understand and cover with tests. A simple API is pleasant to use. But that&rsquo;s still abstract. What&rsquo;s a practical recipe for keeping things small? We might define two attack vectors:</p>

<ul>
<li>Reducing the scope of the problem.</li>
<li>Seeking general case solutions to special case problems.</li>
</ul>
<h2 id="scope-reduction"><span class="heading-prefix" aria-hidden="true"></span>Scope Reduction<a href="#scope-reduction" class="heading-anchor" aria-hidden="true"></a></h2>
<p>This approach is as simple as it gets. Saying no to a <em>problem</em> spares you from having to implement a solution.</p>

<p>Sometimes you need to draw a line and say that this feature shouldn&rsquo;t be in the library, the user should write a bit of glue code instead. Or that this extra concept is not worth the code savings it produces.</p>

<p>For programs with one well-defined function, this is known as the Unix philosophy and is straightforward to follow. But it&rsquo;s also useful for programs with a potentially unbounded scope, like a data modeling library or a <a href="https://golang.org" target="_blank" rel="noopener noreferrer">language compiler<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a>. A surprising number of ideas turns out to be dead weight after a while.</p>

<p>Curiously, this takes willpower, or <em>restraint</em>, which seems to be an unpopular feature with developers. Adding moving parts is interesting. Being lazy is not enough; you have to apply mental <em>effort</em> to refuse additions and keep things simple.</p>
<h2 id="general-case-solutions"><span class="heading-prefix" aria-hidden="true"></span>General Case Solutions<a href="#general-case-solutions" class="heading-anchor" aria-hidden="true"></a></h2>
<p>Programs with an unbounded scope accumulate complexity as a result of tackling new problems, usually in response to feedback. Feedback tends to focus on specific use cases. Addressing them individually leads to accumulating special case solutions, even for problems that could be addressed with a general case feature, if this class of problems could be foreseen in advance.</p>

<p>Feature feedback also indicates that the application scope <em>perceived</em> by users outranges its design scope. Including a new feature or addressing a new use case would expand its implementation scope, which should be defined by the design scope, not the other way around. Which means agreeing to expand a program should begin by exploring and expanding its design scope, as if the system was being designed anew.</p>

<p>Therefore the default reaction to a feature request should be figuring out what class of problems it represents, and either refusing it entirely, or addressing the entire <em>class</em> instead.</p>
<h2 id="conclusion"><span class="heading-prefix" aria-hidden="true"></span>Conclusion<a href="#conclusion" class="heading-anchor" aria-hidden="true"></a></h2>
<p>Every person is different, but for me, both things boil down to restraint. It&rsquo;s tempting to add new moving parts. It&rsquo;s tempting to address a special case instead of figuring out a wider class of problems and a solution that covers them all. You need to stop yourself, take a step back, and remember that taking the time to find the <em>right</em> problem to solve will spare you from throwing solutions away.</p>
</article>]]></content>
    <published>2015-03-10T00:00:00Z</published>
    <updated>2015-03-10T00:00:00Z</updated>
    <link rel="alternate" href="https://mitranim.com/posts/keeping-things-simple"></link>
    <summary type="html"><![CDATA[Musings on simplicity in programming.]]></summary>
    <author>
      <name>Nelo Mitranim</name>
      <email>me@mitranim.com</email>
    </author>
  </entry>
  <entry xml:base="https://mitranim.com/posts/old-posts">
    <title>Old posts</title>
    <id>https://mitranim.com/posts/old-posts</id>
    <content type="html"><![CDATA[<article role="main article" class="fan-typo"><p><a href="https://medium.com/@mitranim/better-mtg-online-82ac42d79970" target="_blank" rel="noopener noreferrer">Better MtG Online<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a></p>

<p>Silly proposal to change Magic the Gathering Online.</p>

<p><a href="https://blog-blogger.mitranim.com/2012/11/a-thank-you-to-eidos-montreal-for-dehr.html" target="_blank" rel="noopener noreferrer">Eidos Montreal love letter<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a></p>

<p>Was so moved by <a href="https://en.wikipedia.org/wiki/Deus_Ex:_Human_Revolution" target="_blank" rel="noopener noreferrer">Deus Ex: Human Revolution<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: inline-block; width: 1.5ex; height: 1.5ex; margin-left: 0.3ch;" aria-hidden="true"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /><polyline points="15 3 21 3 21 9" /><line x1="10" y1="14" x2="21" y2="3" /></svg></a> that I wrote a big &ldquo;thank you&rdquo; to the company that made it.</p>
</article>]]></content>
    <published>2015-01-01T00:00:00Z</published>
    <updated>2015-01-01T00:00:00Z</updated>
    <link rel="alternate" href="https://mitranim.com/posts/old-posts"></link>
    <summary type="html"><![CDATA[Some old stuff from around the net.]]></summary>
    <author>
      <name>Nelo Mitranim</name>
      <email>me@mitranim.com</email>
    </author>
  </entry>
</feed>